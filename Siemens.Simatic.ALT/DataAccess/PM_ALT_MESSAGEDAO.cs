
//=====================================================================
// This file was generated by Siemens.Simatic Platform
// 
// Siemens Copyright (c) 2014 All rights reserved. 
//=====================================================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Globalization;

using Siemens.Simatic.Platform.Core;
using Siemens.Simatic.Platform.Core.ORMapping;
using Siemens.Simatic.Platform.Common;
using Siemens.Simatic.Platform.Common.ExceptionHandling;
using Siemens.Simatic.Platform.Data;
using Siemens.Simatic.Platform.Data.DataAccess;

using Siemens.Simatic.ALT.Common;
using Siemens.Simatic.ALT.Common.Persistence;

namespace Siemens.Simatic.ALT.DataAccess
{
    [DefaultImplementationAttreibute(typeof(DefaultImpl.PM_ALT_MESSAGEDAO))]
    public interface IPM_ALT_MESSAGEDAO : IDataAccessor<PM_ALT_MESSAGE>
    {
    }
}

namespace Siemens.Simatic.ALT.DataAccess.DefaultImpl
{
    /// Title: PM_ALT_MESSAGEDAO
    /// Copyright: Siemens
    /// Version: 1.0  
    public partial class PM_ALT_MESSAGEDAO : IPM_ALT_MESSAGEDAO
    {

        #region SQl
        #region SqlInsert
        private const string SqlInsert = @"INSERT INTO dbo.PM_ALT_MESSAGE (
                                                [MsgSubject],
                                                [MsgContent],
                                                [MsgType],
                                                [Format],
                                                [ObjectID],
                                                [MsgFrom],
                                                [MsgTo],
                                                [MsgCc],
                                                [MsgBcc],
                                                [Attachments],
                                                [URL],
                                                [Category],
                                                [Source],
                                                [ErrorMsg],
                                                [SentCnt],
                                                [ModifiedOn],
                                                [RowDeleted]
                                                ) VALUES ( 
                                                @MsgSubject,
                                                @MsgContent,
                                                @MsgType,
                                                @Format,
                                                @ObjectID,
                                                @MsgFrom,
                                                @MsgTo,
                                                @MsgCc,
                                                @MsgBcc,
                                                @Attachments,
                                                @URL,
                                                @Category,
                                                @Source,
                                                @ErrorMsg,
                                                @SentCnt,
                                                @ModifiedOn,
                                                @RowDeleted
                                            )";
        #endregion

        #region SqlDelete
        private const string SqlDelete = @"DELETE FROM dbo.PM_ALT_MESSAGE 
                                           WHERE 1 = 1 
                                           AND MsgPK = @MsgPK";
        #endregion

        #region SqlUpdateAll
        private const string SqlUpdate = @"UPDATE dbo.PM_ALT_MESSAGE SET
                                            [MsgSubject] = @MsgSubject,
                                            [MsgContent] = @MsgContent,
                                            [MsgType] = @MsgType,
                                            [Format] = @Format,
                                            [ObjectID] = @ObjectID,
                                            [MsgFrom] = @MsgFrom,
                                            [MsgTo] = @MsgTo,
                                            [MsgCc] = @MsgCc,
                                            [MsgBcc] = @MsgBcc,
                                            [Attachments] = @Attachments,
                                            [Attachments] = @URL,
                                            [Category] = @Category,
                                            [Source] = @Source,
                                            [ErrorMsg] = @ErrorMsg,
                                            [SentCnt] = @SentCnt,
                                            [ModifiedOn] = @ModifiedOn,
                                            [RowDeleted] = @RowDeleted
                                            WHERE 1 = 1
                                            AND [MsgPK] = @MsgPK";
        #endregion

        #region SqlGet
        private const string SqlGet = @"SELECT
                                            [MsgPK],
                                            [MsgSubject],
                                            [MsgContent],
                                            [MsgType],
                                            [Format],
                                            [ObjectID],
                                            [MsgFrom],
                                            [MsgTo],
                                            [MsgCc],
                                            [MsgBcc],
                                            [Attachments],
                                            [URL],
                                            [Category],
                                            [Source],
                                            [ErrorMsg],
                                            [SentCnt],
                                            [ModifiedOn],
                                            [RowDeleted]
                                        FROM dbo.PM_ALT_MESSAGE
                                        WHERE 1 = 1 
                                        AND [MsgPK] = @MsgPK";
        #endregion

        #region SqlCount
        private const string SqlCount = @"SELECT COUNT(*) 
                                  FROM dbo.PM_ALT_MESSAGE 
                                  WHERE ( 1 = 1 {0} ) 
                                          ";
        #endregion SqlCount

        #region SqlSelectAll
        private const string SqlSelectAll = @"SELECT
                                                    [MsgPK],
                                                    [MsgSubject],
                                                    [MsgContent],
                                                    [MsgType],
                                                    [Format],
                                                    [ObjectID],
                                                    [MsgFrom],
                                                    [MsgTo],
                                                    [MsgCc],
                                                    [MsgBcc],
                                                    [Attachments],
                                                    [URL],
                                                    [Category],
                                                    [Source],
                                                    [ErrorMsg],
                                                    [SentCnt],
                                                    [ModifiedOn],
                                                    [RowDeleted]
                                                FROM dbo.PM_ALT_MESSAGE 
                                                WHERE (1 = 1 {0} ) {1}
                                        ";
        #endregion SqlSelectAll

        #region SqlSelect
        private const string SqlSelect = @"SELECT TOP {0} 
                                                [MsgPK],
                                                [MsgSubject],
                                                [MsgContent],
                                                [MsgType],
                                                [Format],
                                                [ObjectID],
                                                [MsgFrom],
                                                [MsgTo],
                                                [MsgCc],
                                                [MsgBcc],
                                                [Attachments],
                                                [URL],
                                                [Category],
                                                [Source],
                                                [ErrorMsg],
                                                [SentCnt],
                                                [ModifiedOn],
                                                [RowDeleted]
                                           FROM dbo.PM_ALT_MESSAGE 
                                           WHERE ( 1 = 1 {1} 
                                           AND MsgPK 
                                           NOT IN 
                                           (SELECT TOP {2} MsgPK 
                                           FROM dbo.PM_ALT_MESSAGE 
                                           WHERE (1 = 1 {3}) 
                                           {4} ) ) {5} 
                                           ";
        #endregion SqlSelect
        #endregion SQL


        #region IDataAccessor members

        #region Insert
        /// <summary>
        /// Insert 
        /// </summary>  
        public PM_ALT_MESSAGE Insert(PM_ALT_MESSAGE entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            PersistentPM_ALT_MESSAGE PM_ALT_MESSAGEEntity = entity as PersistentPM_ALT_MESSAGE;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_MESSAGEDAO.SqlInsert);

                //db.AddInParameter(dbCommand, "@MsgPK", DbType.Int64, PM_ALT_MESSAGEEntity.MsgPK);
                db.AddInParameter(dbCommand, "@MsgSubject", DbType.String, PM_ALT_MESSAGEEntity.MsgSubject);
                db.AddInParameter(dbCommand, "@MsgContent", DbType.String, PM_ALT_MESSAGEEntity.MsgContent);
                db.AddInParameter(dbCommand, "@MsgType", DbType.Int32, PM_ALT_MESSAGEEntity.MsgType);
                db.AddInParameter(dbCommand, "@Format", DbType.String, PM_ALT_MESSAGEEntity.Format);
                db.AddInParameter(dbCommand, "@ObjectID", DbType.Guid, PM_ALT_MESSAGEEntity.ObjectID);
                db.AddInParameter(dbCommand, "@MsgFrom", DbType.String, PM_ALT_MESSAGEEntity.MsgFrom);
                db.AddInParameter(dbCommand, "@MsgTo", DbType.String, PM_ALT_MESSAGEEntity.MsgTo);
                db.AddInParameter(dbCommand, "@MsgCc", DbType.String, PM_ALT_MESSAGEEntity.MsgCc);
                db.AddInParameter(dbCommand, "@MsgBcc", DbType.String, PM_ALT_MESSAGEEntity.MsgBcc);
                db.AddInParameter(dbCommand, "@Attachments", DbType.String, PM_ALT_MESSAGEEntity.Attachments);
                db.AddInParameter(dbCommand, "@URL", DbType.String, PM_ALT_MESSAGEEntity.URL);
                db.AddInParameter(dbCommand, "@Category", DbType.String, PM_ALT_MESSAGEEntity.Category);
                db.AddInParameter(dbCommand, "@Source", DbType.String, PM_ALT_MESSAGEEntity.Source);
                db.AddInParameter(dbCommand, "@ErrorMsg", DbType.String, PM_ALT_MESSAGEEntity.ErrorMsg);
                db.AddInParameter(dbCommand, "@SentCnt", DbType.Int32, PM_ALT_MESSAGEEntity.SentCnt);
                db.AddInParameter(dbCommand, "@ModifiedOn", DbType.DateTime, PM_ALT_MESSAGEEntity.ModifiedOn);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_MESSAGEEntity.RowDeleted);

                int result = db.ExecuteNonQuery(dbCommand);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_MESSAGEEntity as PM_ALT_MESSAGE;
        }

        /// <summary>
        /// Insert with transaction
        /// </summary>  
        public PM_ALT_MESSAGE Insert(PM_ALT_MESSAGE entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");
            PersistentPM_ALT_MESSAGE PM_ALT_MESSAGEEntity = entity as PersistentPM_ALT_MESSAGE;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_MESSAGEDAO.SqlInsert);

                //db.AddInParameter(dbCommand, "@MsgPK", DbType.Int64, PM_ALT_MESSAGEEntity.MsgPK);
                db.AddInParameter(dbCommand, "@MsgSubject", DbType.String, PM_ALT_MESSAGEEntity.MsgSubject);
                db.AddInParameter(dbCommand, "@MsgContent", DbType.String, PM_ALT_MESSAGEEntity.MsgContent);
                db.AddInParameter(dbCommand, "@MsgType", DbType.Int32, PM_ALT_MESSAGEEntity.MsgType);
                db.AddInParameter(dbCommand, "@Format", DbType.String, PM_ALT_MESSAGEEntity.Format);
                db.AddInParameter(dbCommand, "@ObjectID", DbType.Guid, PM_ALT_MESSAGEEntity.ObjectID);
                db.AddInParameter(dbCommand, "@MsgFrom", DbType.String, PM_ALT_MESSAGEEntity.MsgFrom);
                db.AddInParameter(dbCommand, "@MsgTo", DbType.String, PM_ALT_MESSAGEEntity.MsgTo);
                db.AddInParameter(dbCommand, "@MsgCc", DbType.String, PM_ALT_MESSAGEEntity.MsgCc);
                db.AddInParameter(dbCommand, "@MsgBcc", DbType.String, PM_ALT_MESSAGEEntity.MsgBcc);
                db.AddInParameter(dbCommand, "@Attachments", DbType.String, PM_ALT_MESSAGEEntity.Attachments);
                db.AddInParameter(dbCommand, "@URL", DbType.String, PM_ALT_MESSAGEEntity.URL);
                db.AddInParameter(dbCommand, "@Category", DbType.String, PM_ALT_MESSAGEEntity.Category);
                db.AddInParameter(dbCommand, "@Source", DbType.String, PM_ALT_MESSAGEEntity.Source);
                db.AddInParameter(dbCommand, "@ErrorMsg", DbType.String, PM_ALT_MESSAGEEntity.ErrorMsg);
                db.AddInParameter(dbCommand, "@SentCnt", DbType.Int32, PM_ALT_MESSAGEEntity.SentCnt);
                db.AddInParameter(dbCommand, "@ModifiedOn", DbType.DateTime, PM_ALT_MESSAGEEntity.ModifiedOn);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_MESSAGEEntity.RowDeleted);

                int result = db.ExecuteNonQuery(dbCommand, transaction);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_MESSAGEEntity as PM_ALT_MESSAGE;
        }

        #endregion Insert

        #region Delete
        /// <summary>
        /// Delete 
        /// </summary>  
        public void Delete(object entityId)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_MESSAGEDAO.SqlDelete);

                db.AddInParameter(dbCommand, "@MsgPK", DbType.Int64, entityId);
                int result = db.ExecuteNonQuery(dbCommand);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }


        /// <summary>
        /// Delete with transaction
        /// </summary>  
        public void Delete(object entityId, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_MESSAGEDAO.SqlDelete);

                db.AddInParameter(dbCommand, "@MsgPK", DbType.Int64, entityId);
                int result = db.ExecuteNonQuery(dbCommand, transaction);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        #endregion Delete

        #region Get
        /// <summary>
        /// Get
        /// </summary>
        public PM_ALT_MESSAGE Get(object entityId)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");

            PM_ALT_MESSAGE PM_ALT_MESSAGEEntity = null;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_MESSAGEDAO.SqlGet);

                db.AddInParameter(dbCommand, "@MsgPK", DbType.Int64, entityId);
                using (IDataReader dataReader = db.ExecuteReader(dbCommand))
                {
                    if (dataReader.Read())
                    {
                        PM_ALT_MESSAGEEntity = ReadEntity(dataReader);
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_MESSAGEEntity;
        }


        /// <summary>
        /// Get with transaction
        /// </summary>
        public PM_ALT_MESSAGE Get(object entityId, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PM_ALT_MESSAGE PM_ALT_MESSAGEEntity = null;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_MESSAGEDAO.SqlGet);

                db.AddInParameter(dbCommand, "@MsgPK", DbType.Int64, entityId);
                using (IDataReader dataReader = db.ExecuteReader(dbCommand, transaction))
                {
                    if (dataReader.Read())
                    {
                        PM_ALT_MESSAGEEntity = ReadEntity(dataReader);
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_MESSAGEEntity;
        }

        #endregion Get

        #region Update

        /// <summary>
        /// Update
        /// </summary>

        public void Update(PM_ALT_MESSAGE entity)
        {
            Update(entity, true);
        }

        public void Update(PM_ALT_MESSAGE entity, bool updateAll)
        {
            if (!updateAll)
            {
                UpdateSome(entity);
            }
            else
            {
                UpdateAll(entity);
            }
        }

        private void UpdateAll(PM_ALT_MESSAGE entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");

            PersistentPM_ALT_MESSAGE PM_ALT_MESSAGEEntity = entity as PersistentPM_ALT_MESSAGE;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_MESSAGEDAO.SqlUpdate);

                db.AddInParameter(dbCommand, "@MsgPK", DbType.Int64, PM_ALT_MESSAGEEntity.MsgPK);
                db.AddInParameter(dbCommand, "@MsgSubject", DbType.String, PM_ALT_MESSAGEEntity.MsgSubject);
                db.AddInParameter(dbCommand, "@MsgContent", DbType.String, PM_ALT_MESSAGEEntity.MsgContent);
                db.AddInParameter(dbCommand, "@MsgType", DbType.Int32, PM_ALT_MESSAGEEntity.MsgType);
                db.AddInParameter(dbCommand, "@Format", DbType.String, PM_ALT_MESSAGEEntity.Format);
                db.AddInParameter(dbCommand, "@ObjectID", DbType.Guid, PM_ALT_MESSAGEEntity.ObjectID);
                db.AddInParameter(dbCommand, "@MsgFrom", DbType.String, PM_ALT_MESSAGEEntity.MsgFrom);
                db.AddInParameter(dbCommand, "@MsgTo", DbType.String, PM_ALT_MESSAGEEntity.MsgTo);
                db.AddInParameter(dbCommand, "@MsgCc", DbType.String, PM_ALT_MESSAGEEntity.MsgCc);
                db.AddInParameter(dbCommand, "@MsgBcc", DbType.String, PM_ALT_MESSAGEEntity.MsgBcc);
                db.AddInParameter(dbCommand, "@Attachments", DbType.String, PM_ALT_MESSAGEEntity.Attachments);
                db.AddInParameter(dbCommand, "@URL", DbType.String, PM_ALT_MESSAGEEntity.URL);
                db.AddInParameter(dbCommand, "@Category", DbType.String, PM_ALT_MESSAGEEntity.Category);
                db.AddInParameter(dbCommand, "@Source", DbType.String, PM_ALT_MESSAGEEntity.Source);
                db.AddInParameter(dbCommand, "@ErrorMsg", DbType.String, PM_ALT_MESSAGEEntity.ErrorMsg);
                db.AddInParameter(dbCommand, "@SentCnt", DbType.Int32, PM_ALT_MESSAGEEntity.SentCnt);
                db.AddInParameter(dbCommand, "@ModifiedOn", DbType.DateTime, PM_ALT_MESSAGEEntity.ModifiedOn);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_MESSAGEEntity.RowDeleted);
                int result = db.ExecuteNonQuery(dbCommand);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        private void UpdateSome(PM_ALT_MESSAGE entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");

            PersistentPM_ALT_MESSAGE PM_ALT_MESSAGEEntity = entity as PersistentPM_ALT_MESSAGE;

            StringBuilder sqlUpdateSome = new StringBuilder();
            sqlUpdateSome.Append("UPDATE dbo.PM_ALT_MESSAGE SET ");

            PropertyInfo[] propertyInfos = PM_ALT_MESSAGEEntity.GetType().GetProperties();
            Hashtable propertyValues = new System.Collections.Hashtable();
            int columnCountForUpdate = 0;

            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if (EntityMapping.ContainsProperty(propertyInfo.Name))
                {
                    object propertyValue = propertyInfo.GetValue(PM_ALT_MESSAGEEntity, null);
                    ORProperty property = EntityMapping[propertyInfo.Name];
                    if (!property.IsPrimaryKey)
                    {
                        if (!PM_ALT_MESSAGEEntity.IsDefaultValue(propertyInfo.Name))
                        {
                            propertyValues[propertyInfo.Name] = propertyValue;

                            sqlUpdateSome.Append(" " + property.ColumnName + " = @" + property.ColumnName + ",");
                            columnCountForUpdate++;
                        }
                    }
                    else
                    {
                        propertyValues[propertyInfo.Name] = propertyValue;
                    }
                }
            }
            if (columnCountForUpdate == 0)
            {
                return;
            }

            sqlUpdateSome.Remove(sqlUpdateSome.Length - 1, 1);
            sqlUpdateSome.Append(" WHERE 1 = 1 ");
            sqlUpdateSome.Append(" AND MsgPK = @MsgPK ");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(sqlUpdateSome.ToString());

                foreach (DictionaryEntry de in propertyValues)
                {
                    ORProperty property = EntityMapping[de.Key.ToString()];
                    db.AddInParameter(dbCommand, "@" + property.ColumnName, property.DatabaseType, de.Value);
                }

                int result = db.ExecuteNonQuery(dbCommand);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        /// <summary>
        /// Update with transaction
        /// </summary>

        public void Update(PM_ALT_MESSAGE entity, DbTransaction transaction)
        {
            Update(entity, true, transaction);
        }

        public void Update(PM_ALT_MESSAGE entity, bool updateAll, DbTransaction transaction)
        {
            if (!updateAll)
            {
                UpdateSome(entity, transaction);
            }
            else
            {
                UpdateAll(entity, transaction);
            }
        }

        private void UpdateAll(PM_ALT_MESSAGE entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PersistentPM_ALT_MESSAGE PM_ALT_MESSAGEEntity = entity as PersistentPM_ALT_MESSAGE;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_MESSAGEDAO.SqlUpdate);

                db.AddInParameter(dbCommand, "@MsgPK", DbType.Int64, PM_ALT_MESSAGEEntity.MsgPK);
                db.AddInParameter(dbCommand, "@MsgSubject", DbType.String, PM_ALT_MESSAGEEntity.MsgSubject);
                db.AddInParameter(dbCommand, "@MsgContent", DbType.String, PM_ALT_MESSAGEEntity.MsgContent);
                db.AddInParameter(dbCommand, "@MsgType", DbType.Int32, PM_ALT_MESSAGEEntity.MsgType);
                db.AddInParameter(dbCommand, "@Format", DbType.String, PM_ALT_MESSAGEEntity.Format);
                db.AddInParameter(dbCommand, "@ObjectID", DbType.Guid, PM_ALT_MESSAGEEntity.ObjectID);
                db.AddInParameter(dbCommand, "@MsgFrom", DbType.String, PM_ALT_MESSAGEEntity.MsgFrom);
                db.AddInParameter(dbCommand, "@MsgTo", DbType.String, PM_ALT_MESSAGEEntity.MsgTo);
                db.AddInParameter(dbCommand, "@MsgCc", DbType.String, PM_ALT_MESSAGEEntity.MsgCc);
                db.AddInParameter(dbCommand, "@MsgBcc", DbType.String, PM_ALT_MESSAGEEntity.MsgBcc);
                db.AddInParameter(dbCommand, "@Attachments", DbType.String, PM_ALT_MESSAGEEntity.Attachments);
                db.AddInParameter(dbCommand, "@URL", DbType.String, PM_ALT_MESSAGEEntity.URL);
                db.AddInParameter(dbCommand, "@Category", DbType.String, PM_ALT_MESSAGEEntity.Category);
                db.AddInParameter(dbCommand, "@Source", DbType.String, PM_ALT_MESSAGEEntity.Source);
                db.AddInParameter(dbCommand, "@ErrorMsg", DbType.String, PM_ALT_MESSAGEEntity.ErrorMsg);
                db.AddInParameter(dbCommand, "@SentCnt", DbType.Int32, PM_ALT_MESSAGEEntity.SentCnt);
                db.AddInParameter(dbCommand, "@ModifiedOn", DbType.DateTime, PM_ALT_MESSAGEEntity.ModifiedOn);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_MESSAGEEntity.RowDeleted);
                int result = db.ExecuteNonQuery(dbCommand, transaction);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        private void UpdateSome(PM_ALT_MESSAGE entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PersistentPM_ALT_MESSAGE PM_ALT_MESSAGEEntity = entity as PersistentPM_ALT_MESSAGE;

            StringBuilder sqlUpdateSome = new StringBuilder();
            sqlUpdateSome.Append("UPDATE dbo.PM_ALT_MESSAGE SET ");

            PropertyInfo[] propertyInfos = PM_ALT_MESSAGEEntity.GetType().GetProperties();
            Hashtable propertyValues = new System.Collections.Hashtable();
            int columnCountForUpdate = 0;

            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if (EntityMapping.ContainsProperty(propertyInfo.Name))
                {
                    object propertyValue = propertyInfo.GetValue(PM_ALT_MESSAGEEntity, null);
                    ORProperty property = EntityMapping[propertyInfo.Name];
                    if (!property.IsPrimaryKey)
                    {
                        if (!PM_ALT_MESSAGEEntity.IsDefaultValue(propertyInfo.Name))
                        {
                            propertyValues[propertyInfo.Name] = propertyValue;

                            sqlUpdateSome.Append(" " + property.ColumnName + " = @" + property.ColumnName + ",");
                            columnCountForUpdate++;
                        }
                    }
                    else
                    {
                        propertyValues[propertyInfo.Name] = propertyValue;
                    }
                }
            }
            if (columnCountForUpdate == 0)
            {
                return;
            }

            sqlUpdateSome.Remove(sqlUpdateSome.Length - 1, 1);
            sqlUpdateSome.Append(" WHERE 1 = 1 ");
            sqlUpdateSome.Append(" AND MsgPK = @MsgPK ");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(sqlUpdateSome.ToString());

                foreach (DictionaryEntry de in propertyValues)
                {
                    ORProperty property = EntityMapping[de.Key.ToString()];
                    db.AddInParameter(dbCommand, "@" + property.ColumnName, property.DatabaseType, de.Value);
                }

                int result = db.ExecuteNonQuery(dbCommand, transaction);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        /// <summary>
        /// ORMapping
        /// </summary>

        private OREntity entityMapping;

        public OREntity EntityMapping
        {
            get
            {
                if (entityMapping == null)
                {
                    LoadMappings();
                }

                return entityMapping;
            }
        }

        private void LoadMappings()
        {
            entityMapping = new OREntity();
            entityMapping.Name = "PM_ALT_MESSAGE";
            entityMapping.TableName = "dbo.PM_ALT_MESSAGE";

            foreach (object[] propertyMapping in this.PropertyMappings)
            {
                ORProperty property = new ORProperty();

                property.ColumnName = (string)propertyMapping[0];
                property.DatabaseType = (DbType)propertyMapping[1];
                property.IsNullable = (bool)propertyMapping[2];
                property.IsPrimaryKey = (bool)propertyMapping[3];
                property.Name = (string)propertyMapping[4];
                property.Type = (Type)propertyMapping[5];

                entityMapping.Properties.Add(property);
            }
        }

        private object[][] PropertyMappings = new object[][] 
        {
            new object[] {"MsgPK", DbType.Int64, false, true, "MsgPK",typeof(Int64?)},
            new object[] {"MsgSubject", DbType.String, false, false, "MsgSubject",typeof(String)},
            new object[] {"MsgContent", DbType.String, false, false, "MsgContent",typeof(String)},
            new object[] {"MsgType", DbType.Int32, true, false, "MsgType",typeof(Int32?)},
            new object[] {"Format", DbType.String, true, false, "Format",typeof(String)},
            new object[] {"ObjectID", DbType.Guid, true, false, "ObjectID",typeof(Guid?)},
            new object[] {"MsgFrom", DbType.String, false, false, "MsgFrom",typeof(String)},
            new object[] {"MsgTo", DbType.String, false, false, "MsgTo",typeof(String)},
            new object[] {"MsgCc", DbType.String, true, false, "MsgCc",typeof(String)},
            new object[] {"MsgBcc", DbType.String, true, false, "MsgBcc",typeof(String)},
            new object[] {"Attachments", DbType.String, true, false, "Attachments",typeof(String)},
            new object[] { "URL", DbType.String, true, false, "URL",typeof(String)},
            new object[] {"Category", DbType.String, true, false, "Category",typeof(String)},
            new object[] {"Source", DbType.String, true, false, "Source",typeof(String)},
            new object[] {"ErrorMsg", DbType.String, true, false, "ErrorMsg",typeof(String)},
            new object[] {"SentCnt", DbType.Int32, false, false, "SentCnt",typeof(Int32?)},
            new object[] {"ModifiedOn", DbType.DateTime, false, false, "ModifiedOn",typeof(DateTime?)},
            new object[] {"RowDeleted", DbType.Boolean, false, false, "RowDeleted",typeof(Boolean?)},
        };


        #endregion Update

        #region Find
        /// <summary>
        /// Find
        /// </summary>
        public IList<PM_ALT_MESSAGE> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords)
        {
            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<PM_ALT_MESSAGE> PM_ALT_MESSAGEList = new List<PM_ALT_MESSAGE>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY MsgPK";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, PM_ALT_MESSAGEDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       PM_ALT_MESSAGEDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand))
                    {
                        while (dataReader.Read())
                        {
                            PM_ALT_MESSAGEList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                //DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                //totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_MESSAGEList;
        }

        /// <summary>
        /// Find with transaction
        /// </summary>
        public IList<PM_ALT_MESSAGE> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<PM_ALT_MESSAGE> PM_ALT_MESSAGEList = new List<PM_ALT_MESSAGE>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY MsgPK";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, PM_ALT_MESSAGEDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       PM_ALT_MESSAGEDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand, transaction))
                    {
                        while (dataReader.Read())
                        {
                            PM_ALT_MESSAGEList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount, transaction));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_MESSAGEList;
        }

        #endregion Find

        #endregion IDataAccessor members


        #region Private Method

        private static Database GetDatabaseInstance()
        {
            return DatabaseFactory.CreateDatabase(DatabaseEnum.SITBusinessDB);
        }

        private static PM_ALT_MESSAGE ReadEntity(IDataReader dataReader)
        {
            PM_ALT_MESSAGE PM_ALT_MESSAGEEntity = new PM_ALT_MESSAGE();
            object value;


            value = dataReader["MsgPK"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.MsgPK = (Int64?)value;
            }

            value = dataReader["MsgSubject"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.MsgSubject = (String)value;
            }

            value = dataReader["MsgContent"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.MsgContent = (String)value;
            }

            value = dataReader["MsgType"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.MsgType = (Int32?)value;
            }

            value = dataReader["Format"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.Format = (String)value;
            }

            value = dataReader["ObjectID"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.ObjectID = (Guid?)value;
            }

            value = dataReader["MsgFrom"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.MsgFrom = (String)value;
            }

            value = dataReader["MsgTo"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.MsgTo = (String)value;
            }

            value = dataReader["MsgCc"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.MsgCc = (String)value;
            }

            value = dataReader["MsgBcc"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.MsgBcc = (String)value;
            }

            value = dataReader["Attachments"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.Attachments = (String)value;
            }

            value = dataReader["URL"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.URL = (String)value;
            }

            value = dataReader["Category"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.Category = (String)value;
            }

            value = dataReader["Source"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.Source = (String)value;
            }

            value = dataReader["ErrorMsg"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.ErrorMsg = (String)value;
            }

            value = dataReader["SentCnt"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.SentCnt = (Int32?)value;
            }

            value = dataReader["ModifiedOn"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.ModifiedOn = (DateTime?)value;
            }

            value = dataReader["RowDeleted"];
            if (value != DBNull.Value)
            {
                PM_ALT_MESSAGEEntity.RowDeleted = (Boolean?)value;
            }

            return PM_ALT_MESSAGEEntity;
        }

        #endregion Private Method

    }
}
