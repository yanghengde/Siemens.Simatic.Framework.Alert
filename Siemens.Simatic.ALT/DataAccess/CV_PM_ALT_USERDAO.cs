
//=====================================================================
// This file was generated by Siemens.Simatic Platform
// 
// LiXiao Info Tech Ltd. Copyright (c) 2014 All rights reserved. 
//=====================================================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Globalization;

using Siemens.Simatic.Platform.Core;
using Siemens.Simatic.Platform.Core.ORMapping;
using Siemens.Simatic.Platform.Common;
using Siemens.Simatic.Platform.Common.ExceptionHandling;
using Siemens.Simatic.Platform.Data;
using Siemens.Simatic.Platform.Data.DataAccess;

using Siemens.Simatic.ALT.Common;
using Siemens.Simatic.ALT.Common.Persistence;

namespace Siemens.Simatic.ALT.DataAccess
{
    [DefaultImplementationAttreibute(typeof(DefaultImpl.CV_PM_ALT_USERDAO))]
    public interface ICV_PM_ALT_USERDAO : IDataAccessor<CV_PM_ALT_USER>
    {
    }
}

namespace Siemens.Simatic.ALT.DataAccess.DefaultImpl
{
    /// Title: CV_PM_ALT_USERDAO
    /// Copyright: LiXiao Info Tech Ltd.
    /// Version: 1.0  
    public partial class CV_PM_ALT_USERDAO : ICV_PM_ALT_USERDAO
    {

        #region SQl
        #region SqlCount
        private const string SqlCount = @"SELECT COUNT(*) 
                                  FROM dbo.CV_PM_ALT_USER 
                                  WHERE ( 1 = 1 {0} ) 
                                          ";
        #endregion SqlCount

        #region SqlSelectAll
        private const string SqlSelectAll = @"SELECT
                                                    [EmployeeGuid],
                                                    [EmployeeCode],
                                                    [EmployeeName],
                                                    [EmployeeType],
                                                    [CardCode],
                                                    [BarCode],
                                                    [Title],
                                                    [Location],
                                                    [Department],
                                                    [Sex],
                                                    [Birthday],
                                                    [Telephone],
                                                    [MobilePhone],
                                                    [Address],
                                                    [EmployeeDesc],
                                                    [SalaryType],
                                                    [BasicSalary],
                                                    [SalaryRate],
                                                    [OvertimeSalaryRate],
                                                    [ReportTo],
                                                    [IsActiveEmployee],
                                                    [MyMarkEmployee],
                                                    [EmailAddress],
                                                    [LoginPassword],
                                                    [StartWorkDate],
                                                    [EndWorkDate],
                                                    [RetireDate],
                                                    [EmployeeTypeCodeBaseCode],
                                                    [EmployeeCodeDetailCode],
                                                    [EmployeeCodeDetailName],
                                                    [EmployeeCodeDetailDesc],
                                                    [EmployeeCodeDetailValue],
                                                    [ElementName],
                                                    [ElementCode],
                                                    [ElementDesc],
                                                    [ElementType],
                                                    [ElementLevel],
                                                    [ParentElementGuid],
                                                    [IsDisplayElement],
                                                    [IsActiveElement],
                                                    [MyMarkElement],
                                                    [ElementNameParent],
                                                    [ElementCodeParent],
                                                    [IsDisplayParent],
                                                    [IsActiveParent],
                                                    [MyMarkParent],
                                                    [ElementNameAndParent],
                                                    [EmployeeNameAndCode]
                                                FROM dbo.CV_PM_ALT_USER 
                                                WHERE (1 = 1 {0} ) {1}
                                        ";
        #endregion SqlSelectAll

        #region SqlSelect
        private const string SqlSelect = @"SELECT TOP {0} 
                                                [EmployeeGuid],
                                                [EmployeeCode],
                                                [EmployeeName],
                                                [EmployeeType],
                                                [CardCode],
                                                [BarCode],
                                                [Title],
                                                [Location],
                                                [Department],
                                                [Sex],
                                                [Birthday],
                                                [Telephone],
                                                [MobilePhone],
                                                [Address],
                                                [EmployeeDesc],
                                                [SalaryType],
                                                [BasicSalary],
                                                [SalaryRate],
                                                [OvertimeSalaryRate],
                                                [ReportTo],
                                                [IsActiveEmployee],
                                                [MyMarkEmployee],
                                                [EmailAddress],
                                                [LoginPassword],
                                                [StartWorkDate],
                                                [EndWorkDate],
                                                [RetireDate],
                                                [EmployeeTypeCodeBaseCode],
                                                [EmployeeCodeDetailCode],
                                                [EmployeeCodeDetailName],
                                                [EmployeeCodeDetailDesc],
                                                [EmployeeCodeDetailValue],
                                                [ElementName],
                                                [ElementCode],
                                                [ElementDesc],
                                                [ElementType],
                                                [ElementLevel],
                                                [ParentElementGuid],
                                                [IsDisplayElement],
                                                [IsActiveElement],
                                                [MyMarkElement],
                                                [ElementNameParent],
                                                [ElementCodeParent],
                                                [IsDisplayParent],
                                                [IsActiveParent],
                                                [MyMarkParent],
                                                [ElementNameAndParent],
                                                [EmployeeNameAndCode]
                                           FROM dbo.CV_PM_ALT_USER 
                                           WHERE ( 1 = 1 {1} 
                                           AND EmployeeGuid 
                                           NOT IN 
                                           (SELECT TOP {2} EmployeeGuid 
                                           FROM dbo.CV_PM_ALT_USER 
                                           WHERE (1 = 1 {3}) 
                                           {4} ) ) {5} 
                                           ";
        #endregion SqlSelect
        #endregion SQL


        #region IDataAccessor members

        #region Find
        /// <summary>
        /// Find
        /// </summary>
        public IList<CV_PM_ALT_USER> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords)
        {
            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<CV_PM_ALT_USER> CV_PM_ALT_USERList = new List<CV_PM_ALT_USER>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY EmployeeGuid";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, CV_PM_ALT_USERDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       CV_PM_ALT_USERDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand))
                    {
                        while (dataReader.Read())
                        {
                            CV_PM_ALT_USERList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                //DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                //totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return CV_PM_ALT_USERList;
        }

        /// <summary>
        /// Find with transaction
        /// </summary>
        public IList<CV_PM_ALT_USER> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<CV_PM_ALT_USER> CV_PM_ALT_USERList = new List<CV_PM_ALT_USER>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY EmployeeGuid";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, CV_PM_ALT_USERDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       CV_PM_ALT_USERDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand, transaction))
                    {
                        while (dataReader.Read())
                        {
                            CV_PM_ALT_USERList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                //DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                //totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount,transaction));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return CV_PM_ALT_USERList;
        }

        #endregion Find

        #endregion IDataAccessor members


        #region Private Method

        private static Database GetDatabaseInstance()
        {
            return DatabaseFactory.CreateDatabase(DatabaseEnum.SITBusinessDB);
        }

        private static CV_PM_ALT_USER ReadEntity(IDataReader dataReader)
        {
            CV_PM_ALT_USER CV_PM_ALT_USEREntity = new CV_PM_ALT_USER();
            object value;


            value = dataReader["EmployeeGuid"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeGuid = (Guid?)value;
            }

            value = dataReader["EmployeeCode"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeCode = (String)value;
            }

            value = dataReader["EmployeeName"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeName = (String)value;
            }

            value = dataReader["EmployeeType"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeType = (String)value;
            }

            value = dataReader["CardCode"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.CardCode = (String)value;
            }

            value = dataReader["BarCode"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.BarCode = (String)value;
            }

            value = dataReader["Title"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.Title = (String)value;
            }

            value = dataReader["Location"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.Location = (String)value;
            }

            value = dataReader["Department"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.Department = (Guid?)value;
            }

            value = dataReader["Sex"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.Sex = (String)value;
            }

            value = dataReader["Birthday"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.Birthday = (String)value;
            }

            value = dataReader["Telephone"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.Telephone = (String)value;
            }

            value = dataReader["MobilePhone"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.MobilePhone = (String)value;
            }

            value = dataReader["Address"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.Address = (String)value;
            }

            value = dataReader["EmployeeDesc"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeDesc = (String)value;
            }

            value = dataReader["SalaryType"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.SalaryType = (String)value;
            }

            value = dataReader["BasicSalary"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.BasicSalary = (Double?)value;
            }

            value = dataReader["SalaryRate"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.SalaryRate = (Double?)value;
            }

            value = dataReader["OvertimeSalaryRate"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.OvertimeSalaryRate = (Double?)value;
            }

            value = dataReader["ReportTo"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ReportTo = (Guid?)value;
            }

            value = dataReader["IsActiveEmployee"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.IsActiveEmployee = (Boolean?)value;
            }

            value = dataReader["MyMarkEmployee"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.MyMarkEmployee = (Int32?)value;
            }

            value = dataReader["EmailAddress"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmailAddress = (String)value;
            }

            value = dataReader["LoginPassword"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.LoginPassword = (String)value;
            }

            value = dataReader["StartWorkDate"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.StartWorkDate = (DateTime?)value;
            }

            value = dataReader["EndWorkDate"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EndWorkDate = (DateTime?)value;
            }

            value = dataReader["RetireDate"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.RetireDate = (DateTime?)value;
            }

            value = dataReader["EmployeeTypeCodeBaseCode"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeTypeCodeBaseCode = (String)value;
            }

            value = dataReader["EmployeeCodeDetailCode"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeCodeDetailCode = (String)value;
            }

            value = dataReader["EmployeeCodeDetailName"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeCodeDetailName = (String)value;
            }

            value = dataReader["EmployeeCodeDetailDesc"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeCodeDetailDesc = (String)value;
            }

            value = dataReader["EmployeeCodeDetailValue"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeCodeDetailValue = (String)value;
            }

            value = dataReader["ElementName"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ElementName = (String)value;
            }

            value = dataReader["ElementCode"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ElementCode = (String)value;
            }

            value = dataReader["ElementDesc"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ElementDesc = (String)value;
            }

            value = dataReader["ElementType"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ElementType = (String)value;
            }

            value = dataReader["ElementLevel"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ElementLevel = (Int32?)value;
            }

            value = dataReader["ParentElementGuid"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ParentElementGuid = (Guid?)value;
            }

            value = dataReader["IsDisplayElement"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.IsDisplayElement = (Boolean?)value;
            }

            value = dataReader["IsActiveElement"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.IsActiveElement = (Boolean?)value;
            }

            value = dataReader["MyMarkElement"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.MyMarkElement = (Int32?)value;
            }

            value = dataReader["ElementNameParent"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ElementNameParent = (String)value;
            }

            value = dataReader["ElementCodeParent"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ElementCodeParent = (String)value;
            }

            value = dataReader["IsDisplayParent"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.IsDisplayParent = (Boolean?)value;
            }

            value = dataReader["IsActiveParent"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.IsActiveParent = (Boolean?)value;
            }

            value = dataReader["MyMarkParent"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.MyMarkParent = (Int32?)value;
            }

            value = dataReader["ElementNameAndParent"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.ElementNameAndParent = (String)value;
            }

            value = dataReader["EmployeeNameAndCode"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_USEREntity.EmployeeNameAndCode = (String)value;
            }

            return CV_PM_ALT_USEREntity;
        }

        #endregion Private Method


        #region NotImplemented Methods

        public CV_PM_ALT_USER Insert(CV_PM_ALT_USER entity)
        {
            throw new NotImplementedException();
        }
        public CV_PM_ALT_USER Insert(CV_PM_ALT_USER entity, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }
        public void Delete(object entityId)
        {
            throw new NotImplementedException();
        }
        public void Delete(object entityId, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }
        public CV_PM_ALT_USER Get(object entityId)
        {
            throw new NotImplementedException();
        }
        public CV_PM_ALT_USER Get(object entityId, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }
        public void Update(CV_PM_ALT_USER entity)
        {
            throw new NotImplementedException();
        }
        public void Update(CV_PM_ALT_USER entity, bool updateAll)
        {
            throw new NotImplementedException();
        }
        public void Update(CV_PM_ALT_USER entity, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }
        public void Update(CV_PM_ALT_USER entity, bool updateAll, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }

        #endregion NotImplemented Methods

    }
}
