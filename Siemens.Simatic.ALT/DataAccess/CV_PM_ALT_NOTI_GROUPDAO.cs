
//=====================================================================
// This file was generated by Siemens.Simatic Platform
// 
// LiXiao Info Tech Ltd. Copyright (c) 2014 All rights reserved. 
//=====================================================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Globalization;

using Siemens.Simatic.Platform.Core;
using Siemens.Simatic.Platform.Core.ORMapping;
using Siemens.Simatic.Platform.Common;
using Siemens.Simatic.Platform.Common.ExceptionHandling;
using Siemens.Simatic.Platform.Data;
using Siemens.Simatic.Platform.Data.DataAccess;

using Siemens.Simatic.ALT.Common;
using Siemens.Simatic.ALT.Common.Persistence;

namespace Siemens.Simatic.ALT.DataAccess
{
    [DefaultImplementationAttreibute(typeof(DefaultImpl.CV_PM_ALT_NOTI_GROUPDAO))]
    public interface ICV_PM_ALT_NOTI_GROUPDAO : IDataAccessor<CV_PM_ALT_NOTI_GROUP>
    {
    }
}

namespace Siemens.Simatic.ALT.DataAccess.DefaultImpl
{
    /// Title: CV_PM_ALT_NOTI_GROUPDAO
    /// Copyright: LiXiao Info Tech Ltd.
    /// Version: 1.0  
    public partial class CV_PM_ALT_NOTI_GROUPDAO : ICV_PM_ALT_NOTI_GROUPDAO
    {

        #region SQl
        #region SqlCount
        private const string SqlCount = @"SELECT COUNT(*) 
                                  FROM dbo.CV_PM_ALT_NOTI_GROUP 
                                  WHERE ( 1 = 1 {0} ) 
                                          ";
        #endregion SqlCount

        #region SqlSelectAll
        private const string SqlSelectAll = @"SELECT
                                                    [NotiGroupID],
                                                    [GroupName],
                                                    [GroupDesc],
                                                    [NotiEmail],
                                                    [NotiSMS],
                                                    [CreatedBy],
                                                    [CreatedOn],
                                                    [ModifiedBy],
                                                    [ModifiedOn]
                                                FROM dbo.CV_PM_ALT_NOTI_GROUP 
                                                WHERE (1 = 1 {0} ) {1}
                                        ";
        #endregion SqlSelectAll

        #region SqlSelect
        private const string SqlSelect = @"SELECT TOP {0} 
                                                [NotiGroupID],
                                                [GroupName],
                                                [GroupDesc],
                                                [NotiEmail],
                                                [NotiSMS],
                                                [CreatedBy],
                                                [CreatedOn],
                                                [ModifiedBy],
                                                [ModifiedOn]
                                           FROM dbo.CV_PM_ALT_NOTI_GROUP 
                                           WHERE ( 1 = 1 {1} 
                                           AND NotiGroupID 
                                           NOT IN 
                                           (SELECT TOP {2} NotiGroupID 
                                           FROM dbo.CV_PM_ALT_NOTI_GROUP 
                                           WHERE (1 = 1 {3}) 
                                           {4} ) ) {5} 
                                           ";
        #endregion SqlSelect
        #endregion SQL


        #region IDataAccessor members

        #region Find
        /// <summary>
        /// Find
        /// </summary>
        public IList<CV_PM_ALT_NOTI_GROUP> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords)
        {
            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<CV_PM_ALT_NOTI_GROUP> CV_PM_ALT_NOTI_GROUPList = new List<CV_PM_ALT_NOTI_GROUP>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY NotiGroupID";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, CV_PM_ALT_NOTI_GROUPDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       CV_PM_ALT_NOTI_GROUPDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand))
                    {
                        while (dataReader.Read())
                        {
                            CV_PM_ALT_NOTI_GROUPList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                //DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                //totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return CV_PM_ALT_NOTI_GROUPList;
        }

        /// <summary>
        /// Find with transaction
        /// </summary>
        public IList<CV_PM_ALT_NOTI_GROUP> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<CV_PM_ALT_NOTI_GROUP> CV_PM_ALT_NOTI_GROUPList = new List<CV_PM_ALT_NOTI_GROUP>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY NotiGroupID";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, CV_PM_ALT_NOTI_GROUPDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       CV_PM_ALT_NOTI_GROUPDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand, transaction))
                    {
                        while (dataReader.Read())
                        {
                            CV_PM_ALT_NOTI_GROUPList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                //DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                //totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount,transaction));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return CV_PM_ALT_NOTI_GROUPList;
        }

        #endregion Find

        #endregion IDataAccessor members


        #region Private Method

        private static Database GetDatabaseInstance()
        {
            return DatabaseFactory.CreateDatabase(DatabaseEnum.SITBusinessDB);
        }

        private static CV_PM_ALT_NOTI_GROUP ReadEntity(IDataReader dataReader)
        {
            CV_PM_ALT_NOTI_GROUP CV_PM_ALT_NOTI_GROUPEntity = new CV_PM_ALT_NOTI_GROUP();
            object value;


            value = dataReader["NotiGroupID"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.NotiGroupID = (Guid?)value;
            }

            value = dataReader["GroupName"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.GroupName = (String)value;
            }

            value = dataReader["GroupDesc"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.GroupDesc = (String)value;
            }

            value = dataReader["NotiEmail"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.NotiEmail = (Boolean?)value;
            }

            value = dataReader["NotiSMS"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.NotiSMS = (Boolean?)value;
            }

            value = dataReader["CreatedBy"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.CreatedBy = (String)value;
            }

            value = dataReader["CreatedOn"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.CreatedOn = (DateTime?)value;
            }

            value = dataReader["ModifiedBy"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.ModifiedBy = (String)value;
            }

            value = dataReader["ModifiedOn"];
            if (value != DBNull.Value)
            {
                CV_PM_ALT_NOTI_GROUPEntity.ModifiedOn = (DateTime?)value;
            }

            return CV_PM_ALT_NOTI_GROUPEntity;
        }

        #endregion Private Method


        #region NotImplemented Methods

        public CV_PM_ALT_NOTI_GROUP Insert(CV_PM_ALT_NOTI_GROUP entity)
        {
            throw new NotImplementedException();
        }
        public CV_PM_ALT_NOTI_GROUP Insert(CV_PM_ALT_NOTI_GROUP entity, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }
        public void Delete(object entityId)
        {
            throw new NotImplementedException();
        }
        public void Delete(object entityId, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }
        public CV_PM_ALT_NOTI_GROUP Get(object entityId)
        {
            throw new NotImplementedException();
        }
        public CV_PM_ALT_NOTI_GROUP Get(object entityId, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }
        public void Update(CV_PM_ALT_NOTI_GROUP entity)
        {
            throw new NotImplementedException();
        }
        public void Update(CV_PM_ALT_NOTI_GROUP entity, bool updateAll)
        {
            throw new NotImplementedException();
        }
        public void Update(CV_PM_ALT_NOTI_GROUP entity, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }
        public void Update(CV_PM_ALT_NOTI_GROUP entity, bool updateAll, DbTransaction transaction)
        {
            throw new NotImplementedException();
        }

        #endregion NotImplemented Methods

    }
}
