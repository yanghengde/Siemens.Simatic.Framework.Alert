
//=====================================================================
// This file was generated by Siemens.Simatic Platform
// 
// LiXiao Info Tech Ltd. Copyright (c) 2014 All rights reserved. 
//=====================================================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Globalization;

using Siemens.Simatic.Platform.Core;
using Siemens.Simatic.Platform.Core.ORMapping;
using Siemens.Simatic.Platform.Common;
using Siemens.Simatic.Platform.Common.ExceptionHandling;
using Siemens.Simatic.Platform.Data;
using Siemens.Simatic.Platform.Data.DataAccess;

using Siemens.Simatic.ALT.Common;
using Siemens.Simatic.ALT.Common.Persistence;

namespace Siemens.Simatic.ALT.DataAccess
{
    [DefaultImplementationAttreibute(typeof(DefaultImpl.PM_ALT_LOGDAO))]
    public partial interface IPM_ALT_LOGDAO : IDataAccessor<PM_ALT_LOG>
    {
    }
}

namespace Siemens.Simatic.ALT.DataAccess.DefaultImpl
{
    /// Title: PM_ALT_LOGDAO
    /// Copyright: LiXiao Info Tech Ltd.
    /// Version: 1.0  
    public partial class PM_ALT_LOGDAO : IPM_ALT_LOGDAO
    {

        #region SQl
        #region SqlInsert
        private const string SqlInsert = @"INSERT INTO dbo.PM_ALT_LOG (
                                                [AlertID],
                                                [LogTitle],
                                                [LogContent],
                                                [NotifiedCnt],
                                                [IsClosed],
                                                [RespondedBy],
                                                [RespondedOn],
                                                [ResponseAction],
                                                [ResponseCause],
                                                [ResponseNotes],
                                                [AuditedBy],
                                                [AuditedOn],
                                                [RowDeleted],
                                                [CreatedBy],
                                                [CreatedOn],
                                                [NotifiedBy],
                                                [NotifiedOn]
                                                ) VALUES ( 
                                                @AlertID,
                                                @LogTitle,
                                                @LogContent,
                                                @NotifiedCnt,
                                                @IsClosed,
                                                @RespondedBy,
                                                @RespondedOn,
                                                @ResponseAction,
                                                @ResponseCause,
                                                @ResponseNotes,
                                                @AuditedBy,
                                                @AuditedOn,
                                                @RowDeleted,
                                                @CreatedBy,
                                                @CreatedOn,
                                                @NotifiedBy,
                                                @NotifiedOn
                                            )";
        #endregion

        #region SqlDelete
        private const string SqlDelete = @"DELETE FROM dbo.PM_ALT_LOG 
                                           WHERE 1 = 1 
                                           AND LogPK = @LogPK";
        #endregion

        #region SqlUpdateAll
        private const string SqlUpdate = @"UPDATE dbo.PM_ALT_LOG SET
                                            [AlertID] = @AlertID,
                                            [LogTitle] = @LogTitle,
                                            [LogContent] = @LogContent,
                                            [NotifiedCnt] = @NotifiedCnt,
                                            [IsClosed] = @IsClosed,
                                            [RespondedBy] = @RespondedBy,
                                            [RespondedOn] = @RespondedOn,
                                            [ResponseAction] = @ResponseAction,
                                            [ResponseCause] = @ResponseCause,
                                            [ResponseNotes] = @ResponseNotes,
                                            [AuditedBy] = @AuditedBy,
                                            [AuditedOn] = @AuditedOn,
                                            [RowDeleted] = @RowDeleted,
                                            [CreatedBy] = @CreatedBy,
                                            [CreatedOn] = @CreatedOn,
                                            [NotifiedBy] = @NotifiedBy,
                                            [NotifiedOn] = @NotifiedOn
                                            WHERE 1 = 1
                                            AND [LogPK] = @LogPK";
        #endregion

        #region SqlGet
        private const string SqlGet = @"SELECT
                                            [LogPK],
                                            [AlertID],
                                            [LogTitle],
                                            [LogContent],
                                            [NotifiedCnt],
                                            [IsClosed],
                                            [RespondedBy],
                                            [RespondedOn],
                                            [ResponseAction],
                                            [ResponseCause],
                                            [ResponseNotes],
                                            [AuditedBy],
                                            [AuditedOn],
                                            [RowDeleted],
                                            [CreatedBy],
                                            [CreatedOn],
                                            [NotifiedBy],
                                            [NotifiedOn]
                                        FROM dbo.PM_ALT_LOG
                                        WHERE 1 = 1 
                                        AND [LogPK] = @LogPK";
        #endregion

        #region SqlCount
        private const string SqlCount = @"SELECT COUNT(*) 
                                  FROM dbo.PM_ALT_LOG 
                                  WHERE ( 1 = 1 {0} ) 
                                          ";
        #endregion SqlCount

        #region SqlSelectAll
        private const string SqlSelectAll = @"SELECT
                                                    [LogPK],
                                                    [AlertID],
                                                    [LogTitle],
                                                    [LogContent],
                                                    [NotifiedCnt],
                                                    [IsClosed],
                                                    [RespondedBy],
                                                    [RespondedOn],
                                                    [ResponseAction],
                                                    [ResponseCause],
                                                    [ResponseNotes],
                                                    [AuditedBy],
                                                    [AuditedOn],
                                                    [RowDeleted],
                                                    [CreatedBy],
                                                    [CreatedOn],
                                                    [NotifiedBy],
                                                    [NotifiedOn]
                                                FROM dbo.PM_ALT_LOG 
                                                WHERE (1 = 1 {0} ) {1}
                                        ";
        #endregion SqlSelectAll

        #region SqlSelect
        private const string SqlSelect = @"SELECT TOP {0} 
                                                [LogPK],
                                                [AlertID],
                                                [LogTitle],
                                                [LogContent],
                                                [NotifiedCnt],
                                                [IsClosed],
                                                [RespondedBy],
                                                [RespondedOn],
                                                [ResponseAction],
                                                [ResponseCause],
                                                [ResponseNotes],
                                                [AuditedBy],
                                                [AuditedOn],
                                                [RowDeleted],
                                                [CreatedBy],
                                                [CreatedOn],
                                                [NotifiedBy],
                                                [NotifiedOn]
                                           FROM dbo.PM_ALT_LOG 
                                           WHERE ( 1 = 1 {1} 
                                           AND LogPK 
                                           NOT IN 
                                           (SELECT TOP {2} LogPK 
                                           FROM dbo.PM_ALT_LOG 
                                           WHERE (1 = 1 {3}) 
                                           {4} ) ) {5} 
                                           ";
        #endregion SqlSelect
        #endregion SQL


        #region IDataAccessor members

        #region Insert
        /// <summary>
        /// Insert 
        /// </summary>  
        public PM_ALT_LOG Insert(PM_ALT_LOG entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            PersistentPM_ALT_LOG PM_ALT_LOGEntity = entity as PersistentPM_ALT_LOG;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_LOGDAO.SqlInsert);

                db.AddInParameter(dbCommand, "@AlertID", DbType.Guid, PM_ALT_LOGEntity.AlertID);
                db.AddInParameter(dbCommand, "@LogTitle", DbType.String, PM_ALT_LOGEntity.LogTitle);
                db.AddInParameter(dbCommand, "@LogContent", DbType.String, PM_ALT_LOGEntity.LogContent);
                db.AddInParameter(dbCommand, "@NotifiedCnt", DbType.Int32, PM_ALT_LOGEntity.NotifiedCnt);
                db.AddInParameter(dbCommand, "@IsClosed", DbType.Boolean, PM_ALT_LOGEntity.IsClosed);
                db.AddInParameter(dbCommand, "@RespondedBy", DbType.String, PM_ALT_LOGEntity.RespondedBy);
                db.AddInParameter(dbCommand, "@RespondedOn", DbType.DateTime, PM_ALT_LOGEntity.RespondedOn);
                db.AddInParameter(dbCommand, "@ResponseAction", DbType.String, PM_ALT_LOGEntity.ResponseAction);
                db.AddInParameter(dbCommand, "@ResponseCause", DbType.String, PM_ALT_LOGEntity.ResponseCause);
                db.AddInParameter(dbCommand, "@ResponseNotes", DbType.String, PM_ALT_LOGEntity.ResponseNotes);
                db.AddInParameter(dbCommand, "@AuditedBy", DbType.String, PM_ALT_LOGEntity.AuditedBy);
                db.AddInParameter(dbCommand, "@AuditedOn", DbType.DateTime, PM_ALT_LOGEntity.AuditedOn);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_LOGEntity.RowDeleted);
                db.AddInParameter(dbCommand, "@CreatedBy", DbType.String, PM_ALT_LOGEntity.CreatedBy);
                db.AddInParameter(dbCommand, "@CreatedOn", DbType.DateTime, PM_ALT_LOGEntity.CreatedOn);
                db.AddInParameter(dbCommand, "@NotifiedBy", DbType.String, PM_ALT_LOGEntity.NotifiedBy);
                db.AddInParameter(dbCommand, "@NotifiedOn", DbType.DateTime, PM_ALT_LOGEntity.NotifiedOn);

                int result = db.ExecuteNonQuery(dbCommand);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_LOGEntity as PM_ALT_LOG;
        }

        /// <summary>
        /// Insert with transaction
        /// </summary>  
        public PM_ALT_LOG Insert(PM_ALT_LOG entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");
            PersistentPM_ALT_LOG PM_ALT_LOGEntity = entity as PersistentPM_ALT_LOG;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_LOGDAO.SqlInsert);

                db.AddInParameter(dbCommand, "@AlertID", DbType.Guid, PM_ALT_LOGEntity.AlertID);
                db.AddInParameter(dbCommand, "@LogTitle", DbType.String, PM_ALT_LOGEntity.LogTitle);
                db.AddInParameter(dbCommand, "@LogContent", DbType.String, PM_ALT_LOGEntity.LogContent);
                db.AddInParameter(dbCommand, "@NotifiedCnt", DbType.Int32, PM_ALT_LOGEntity.NotifiedCnt);
                db.AddInParameter(dbCommand, "@IsClosed", DbType.Boolean, PM_ALT_LOGEntity.IsClosed);
                db.AddInParameter(dbCommand, "@RespondedBy", DbType.String, PM_ALT_LOGEntity.RespondedBy);
                db.AddInParameter(dbCommand, "@RespondedOn", DbType.DateTime, PM_ALT_LOGEntity.RespondedOn);
                db.AddInParameter(dbCommand, "@ResponseAction", DbType.String, PM_ALT_LOGEntity.ResponseAction);
                db.AddInParameter(dbCommand, "@ResponseCause", DbType.String, PM_ALT_LOGEntity.ResponseCause);
                db.AddInParameter(dbCommand, "@ResponseNotes", DbType.String, PM_ALT_LOGEntity.ResponseNotes);
                db.AddInParameter(dbCommand, "@AuditedBy", DbType.String, PM_ALT_LOGEntity.AuditedBy);
                db.AddInParameter(dbCommand, "@AuditedOn", DbType.DateTime, PM_ALT_LOGEntity.AuditedOn);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_LOGEntity.RowDeleted);
                db.AddInParameter(dbCommand, "@CreatedBy", DbType.String, PM_ALT_LOGEntity.CreatedBy);
                db.AddInParameter(dbCommand, "@CreatedOn", DbType.DateTime, PM_ALT_LOGEntity.CreatedOn);
                db.AddInParameter(dbCommand, "@NotifiedBy", DbType.String, PM_ALT_LOGEntity.NotifiedBy);
                db.AddInParameter(dbCommand, "@NotifiedOn", DbType.DateTime, PM_ALT_LOGEntity.NotifiedOn);

                int result = db.ExecuteNonQuery(dbCommand, transaction);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_LOGEntity as PM_ALT_LOG;
        }

        #endregion Insert

        #region Delete
        /// <summary>
        /// Delete 
        /// </summary>  
        public void Delete(object entityId)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_LOGDAO.SqlDelete);

                db.AddInParameter(dbCommand, "@LogPK", DbType.Int64, entityId);
                int result = db.ExecuteNonQuery(dbCommand);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }


        /// <summary>
        /// Delete with transaction
        /// </summary>  
        public void Delete(object entityId, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_LOGDAO.SqlDelete);

                db.AddInParameter(dbCommand, "@LogPK", DbType.Int64, entityId);
                int result = db.ExecuteNonQuery(dbCommand, transaction);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        #endregion Delete

        #region Get
        /// <summary>
        /// Get
        /// </summary>
        public PM_ALT_LOG Get(object entityId)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");

            PM_ALT_LOG PM_ALT_LOGEntity = null;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_LOGDAO.SqlGet);

                db.AddInParameter(dbCommand, "@LogPK", DbType.Int64, entityId);
                using (IDataReader dataReader = db.ExecuteReader(dbCommand))
                {
                    if (dataReader.Read())
                    {
                        PM_ALT_LOGEntity = ReadEntity(dataReader);
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_LOGEntity;
        }


        /// <summary>
        /// Get with transaction
        /// </summary>
        public PM_ALT_LOG Get(object entityId, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PM_ALT_LOG PM_ALT_LOGEntity = null;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_LOGDAO.SqlGet);

                db.AddInParameter(dbCommand, "@LogPK", DbType.Int64, entityId);
                using (IDataReader dataReader = db.ExecuteReader(dbCommand, transaction))
                {
                    if (dataReader.Read())
                    {
                        PM_ALT_LOGEntity = ReadEntity(dataReader);
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_LOGEntity;
        }

        #endregion Get

        #region Update

        /// <summary>
        /// Update
        /// </summary>

        public void Update(PM_ALT_LOG entity)
        {
            Update(entity, true);
        }

        public void Update(PM_ALT_LOG entity, bool updateAll)
        {
            if (!updateAll)
            {
                UpdateSome(entity);
            }
            else
            {
                UpdateAll(entity);
            }
        }

        private void UpdateAll(PM_ALT_LOG entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");

            PersistentPM_ALT_LOG PM_ALT_LOGEntity = entity as PersistentPM_ALT_LOG;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_LOGDAO.SqlUpdate);

                db.AddInParameter(dbCommand, "@LogPK", DbType.Int64, PM_ALT_LOGEntity.LogPK);
                db.AddInParameter(dbCommand, "@AlertID", DbType.Guid, PM_ALT_LOGEntity.AlertID);
                db.AddInParameter(dbCommand, "@LogTitle", DbType.String, PM_ALT_LOGEntity.LogTitle);
                db.AddInParameter(dbCommand, "@LogContent", DbType.String, PM_ALT_LOGEntity.LogContent);
                db.AddInParameter(dbCommand, "@NotifiedCnt", DbType.Int32, PM_ALT_LOGEntity.NotifiedCnt);
                db.AddInParameter(dbCommand, "@IsClosed", DbType.Boolean, PM_ALT_LOGEntity.IsClosed);
                db.AddInParameter(dbCommand, "@RespondedBy", DbType.String, PM_ALT_LOGEntity.RespondedBy);
                db.AddInParameter(dbCommand, "@RespondedOn", DbType.DateTime, PM_ALT_LOGEntity.RespondedOn);
                db.AddInParameter(dbCommand, "@ResponseAction", DbType.String, PM_ALT_LOGEntity.ResponseAction);
                db.AddInParameter(dbCommand, "@ResponseCause", DbType.String, PM_ALT_LOGEntity.ResponseCause);
                db.AddInParameter(dbCommand, "@ResponseNotes", DbType.String, PM_ALT_LOGEntity.ResponseNotes);
                db.AddInParameter(dbCommand, "@AuditedBy", DbType.String, PM_ALT_LOGEntity.AuditedBy);
                db.AddInParameter(dbCommand, "@AuditedOn", DbType.DateTime, PM_ALT_LOGEntity.AuditedOn);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_LOGEntity.RowDeleted);
                db.AddInParameter(dbCommand, "@CreatedBy", DbType.String, PM_ALT_LOGEntity.CreatedBy);
                db.AddInParameter(dbCommand, "@CreatedOn", DbType.DateTime, PM_ALT_LOGEntity.CreatedOn);
                db.AddInParameter(dbCommand, "@NotifiedBy", DbType.String, PM_ALT_LOGEntity.NotifiedBy);
                db.AddInParameter(dbCommand, "@NotifiedOn", DbType.DateTime, PM_ALT_LOGEntity.NotifiedOn);
                int result = db.ExecuteNonQuery(dbCommand);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        private void UpdateSome(PM_ALT_LOG entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");

            PersistentPM_ALT_LOG PM_ALT_LOGEntity = entity as PersistentPM_ALT_LOG;

            StringBuilder sqlUpdateSome = new StringBuilder();
            sqlUpdateSome.Append("UPDATE dbo.PM_ALT_LOG SET ");

            PropertyInfo[] propertyInfos = PM_ALT_LOGEntity.GetType().GetProperties();
            Hashtable propertyValues = new System.Collections.Hashtable();
            int columnCountForUpdate = 0;

            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if (EntityMapping.ContainsProperty(propertyInfo.Name))
                {
                    object propertyValue = propertyInfo.GetValue(PM_ALT_LOGEntity, null);
                    ORProperty property = EntityMapping[propertyInfo.Name];
                    if (!property.IsPrimaryKey)
                    {
                        if (!PM_ALT_LOGEntity.IsDefaultValue(propertyInfo.Name))
                        {
                            propertyValues[propertyInfo.Name] = propertyValue;

                            sqlUpdateSome.Append(" " + property.ColumnName + " = @" + property.ColumnName + ",");
                            columnCountForUpdate++;
                        }
                    }
                    else
                    {
                        propertyValues[propertyInfo.Name] = propertyValue;
                    }
                }
            }
            if (columnCountForUpdate == 0)
            {
                return;
            }

            sqlUpdateSome.Remove(sqlUpdateSome.Length - 1, 1);
            sqlUpdateSome.Append(" WHERE 1 = 1 ");
            sqlUpdateSome.Append(" AND LogPK = @LogPK ");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(sqlUpdateSome.ToString());

                foreach (DictionaryEntry de in propertyValues)
                {
                    ORProperty property = EntityMapping[de.Key.ToString()];
                    db.AddInParameter(dbCommand, "@" + property.ColumnName, property.DatabaseType, de.Value);
                }

                int result = db.ExecuteNonQuery(dbCommand);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        /// <summary>
        /// Update with transaction
        /// </summary>

        public void Update(PM_ALT_LOG entity, DbTransaction transaction)
        {
            Update(entity, true, transaction);
        }

        public void Update(PM_ALT_LOG entity, bool updateAll, DbTransaction transaction)
        {
            if (!updateAll)
            {
                UpdateSome(entity, transaction);
            }
            else
            {
                UpdateAll(entity, transaction);
            }
        }

        private void UpdateAll(PM_ALT_LOG entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PersistentPM_ALT_LOG PM_ALT_LOGEntity = entity as PersistentPM_ALT_LOG;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_LOGDAO.SqlUpdate);

                db.AddInParameter(dbCommand, "@LogPK", DbType.Int64, PM_ALT_LOGEntity.LogPK);
                db.AddInParameter(dbCommand, "@AlertID", DbType.Guid, PM_ALT_LOGEntity.AlertID);
                db.AddInParameter(dbCommand, "@LogTitle", DbType.String, PM_ALT_LOGEntity.LogTitle);
                db.AddInParameter(dbCommand, "@LogContent", DbType.String, PM_ALT_LOGEntity.LogContent);
                db.AddInParameter(dbCommand, "@NotifiedCnt", DbType.Int32, PM_ALT_LOGEntity.NotifiedCnt);
                db.AddInParameter(dbCommand, "@IsClosed", DbType.Boolean, PM_ALT_LOGEntity.IsClosed);
                db.AddInParameter(dbCommand, "@RespondedBy", DbType.String, PM_ALT_LOGEntity.RespondedBy);
                db.AddInParameter(dbCommand, "@RespondedOn", DbType.DateTime, PM_ALT_LOGEntity.RespondedOn);
                db.AddInParameter(dbCommand, "@ResponseAction", DbType.String, PM_ALT_LOGEntity.ResponseAction);
                db.AddInParameter(dbCommand, "@ResponseCause", DbType.String, PM_ALT_LOGEntity.ResponseCause);
                db.AddInParameter(dbCommand, "@ResponseNotes", DbType.String, PM_ALT_LOGEntity.ResponseNotes);
                db.AddInParameter(dbCommand, "@AuditedBy", DbType.String, PM_ALT_LOGEntity.AuditedBy);
                db.AddInParameter(dbCommand, "@AuditedOn", DbType.DateTime, PM_ALT_LOGEntity.AuditedOn);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_LOGEntity.RowDeleted);
                db.AddInParameter(dbCommand, "@CreatedBy", DbType.String, PM_ALT_LOGEntity.CreatedBy);
                db.AddInParameter(dbCommand, "@CreatedOn", DbType.DateTime, PM_ALT_LOGEntity.CreatedOn);
                db.AddInParameter(dbCommand, "@NotifiedBy", DbType.String, PM_ALT_LOGEntity.NotifiedBy);
                db.AddInParameter(dbCommand, "@NotifiedOn", DbType.DateTime, PM_ALT_LOGEntity.NotifiedOn);
                int result = db.ExecuteNonQuery(dbCommand, transaction);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        private void UpdateSome(PM_ALT_LOG entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PersistentPM_ALT_LOG PM_ALT_LOGEntity = entity as PersistentPM_ALT_LOG;

            StringBuilder sqlUpdateSome = new StringBuilder();
            sqlUpdateSome.Append("UPDATE dbo.PM_ALT_LOG SET ");

            PropertyInfo[] propertyInfos = PM_ALT_LOGEntity.GetType().GetProperties();
            Hashtable propertyValues = new System.Collections.Hashtable();
            int columnCountForUpdate = 0;

            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if (EntityMapping.ContainsProperty(propertyInfo.Name))
                {
                    object propertyValue = propertyInfo.GetValue(PM_ALT_LOGEntity, null);
                    ORProperty property = EntityMapping[propertyInfo.Name];
                    if (!property.IsPrimaryKey)
                    {
                        if (!PM_ALT_LOGEntity.IsDefaultValue(propertyInfo.Name))
                        {
                            propertyValues[propertyInfo.Name] = propertyValue;

                            sqlUpdateSome.Append(" " + property.ColumnName + " = @" + property.ColumnName + ",");
                            columnCountForUpdate++;
                        }
                    }
                    else
                    {
                        propertyValues[propertyInfo.Name] = propertyValue;
                    }
                }
            }
            if (columnCountForUpdate == 0)
            {
                return;
            }

            sqlUpdateSome.Remove(sqlUpdateSome.Length - 1, 1);
            sqlUpdateSome.Append(" WHERE 1 = 1 ");
            sqlUpdateSome.Append(" AND LogPK = @LogPK ");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(sqlUpdateSome.ToString());

                foreach (DictionaryEntry de in propertyValues)
                {
                    ORProperty property = EntityMapping[de.Key.ToString()];
                    db.AddInParameter(dbCommand, "@" + property.ColumnName, property.DatabaseType, de.Value);
                }

                int result = db.ExecuteNonQuery(dbCommand, transaction);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        /// <summary>
        /// ORMapping
        /// </summary>

        private OREntity entityMapping;

        public OREntity EntityMapping
        {
            get
            {
                if (entityMapping == null)
                {
                    LoadMappings();
                }

                return entityMapping;
            }
        }

        private void LoadMappings()
        {
            entityMapping = new OREntity();
            entityMapping.Name = "PM_ALT_LOG";
            entityMapping.TableName = "dbo.PM_ALT_LOG";

            foreach (object[] propertyMapping in this.PropertyMappings)
            {
                ORProperty property = new ORProperty();

                property.ColumnName = (string)propertyMapping[0];
                property.DatabaseType = (DbType)propertyMapping[1];
                property.IsNullable = (bool)propertyMapping[2];
                property.IsPrimaryKey = (bool)propertyMapping[3];
                property.Name = (string)propertyMapping[4];
                property.Type = (Type)propertyMapping[5];

                entityMapping.Properties.Add(property);
            }
        }

        private object[][] PropertyMappings = new object[][] 
        {
            new object[] {"LogPK", DbType.Int64, false, true, "LogPK",typeof(Int64?)},
            new object[] {"AlertID", DbType.Guid, false, false, "AlertID",typeof(Guid?)},
            new object[] {"LogTitle", DbType.String, false, false, "LogTitle",typeof(String)},
            new object[] {"LogContent", DbType.String, false, false, "LogContent",typeof(String)},
            new object[] {"NotifiedCnt", DbType.Int32, false, false, "NotifiedCnt",typeof(Int32?)},
            new object[] {"IsClosed", DbType.Boolean, false, false, "IsClosed",typeof(Boolean?)},
            new object[] {"RespondedBy", DbType.String, true, false, "RespondedBy",typeof(String)},
            new object[] {"RespondedOn", DbType.DateTime, true, false, "RespondedOn",typeof(DateTime?)},
            new object[] {"ResponseAction", DbType.String, true, false, "ResponseAction",typeof(String)},
            new object[] {"ResponseCause", DbType.String, true, false, "ResponseCause",typeof(String)},
            new object[] {"ResponseNotes", DbType.String, true, false, "ResponseNotes",typeof(String)},
            new object[] {"AuditedBy", DbType.String, true, false, "AuditedBy",typeof(String)},
            new object[] {"AuditedOn", DbType.DateTime, true, false, "AuditedOn",typeof(DateTime?)},
            new object[] {"RowDeleted", DbType.Boolean, false, false, "RowDeleted",typeof(Boolean?)},
            new object[] {"CreatedBy", DbType.String, false, false, "CreatedBy",typeof(String)},
            new object[] {"CreatedOn", DbType.DateTime, false, false, "CreatedOn",typeof(DateTime?)},
            new object[] {"NotifiedBy", DbType.String, true, false, "NotifiedBy",typeof(String)},
            new object[] {"NotifiedOn", DbType.DateTime, true, false, "NotifiedOn",typeof(DateTime?)},
        };


        #endregion Update

        #region Find
        /// <summary>
        /// Find
        /// </summary>
        public IList<PM_ALT_LOG> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords)
        {
            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<PM_ALT_LOG> PM_ALT_LOGList = new List<PM_ALT_LOG>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY LogPK";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, PM_ALT_LOGDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       PM_ALT_LOGDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand))
                    {
                        while (dataReader.Read())
                        {
                            PM_ALT_LOGList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                //DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                //totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_LOGList;
        }

        /// <summary>
        /// Find with transaction
        /// </summary>
        public IList<PM_ALT_LOG> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<PM_ALT_LOG> PM_ALT_LOGList = new List<PM_ALT_LOG>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY LogPK";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, PM_ALT_LOGDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       PM_ALT_LOGDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand, transaction))
                    {
                        while (dataReader.Read())
                        {
                            PM_ALT_LOGList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount, transaction));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_LOGList;
        }

        #endregion Find

        #endregion IDataAccessor members


        #region Private Method

        private static Database GetDatabaseInstance()
        {
            return DatabaseFactory.CreateDatabase(DatabaseEnum.SITBusinessDB);
        }

        private static PM_ALT_LOG ReadEntity(IDataReader dataReader)
        {
            PM_ALT_LOG PM_ALT_LOGEntity = new PM_ALT_LOG();
            object value;


            value = dataReader["LogPK"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.LogPK = (Int64?)value;
            }

            value = dataReader["AlertID"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.AlertID = (Guid?)value;
            }

            value = dataReader["LogTitle"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.LogTitle = (String)value;
            }

            value = dataReader["LogContent"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.LogContent = (String)value;
            }

            value = dataReader["NotifiedCnt"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.NotifiedCnt = (Int32?)value;
            }

            value = dataReader["IsClosed"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.IsClosed = (Boolean?)value;
            }

            value = dataReader["RespondedBy"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.RespondedBy = (String)value;
            }

            value = dataReader["RespondedOn"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.RespondedOn = (DateTime?)value;
            }

            value = dataReader["ResponseAction"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.ResponseAction = (String)value;
            }

            value = dataReader["ResponseCause"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.ResponseCause = (String)value;
            }

            value = dataReader["ResponseNotes"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.ResponseNotes = (String)value;
            }

            value = dataReader["AuditedBy"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.AuditedBy = (String)value;
            }

            value = dataReader["AuditedOn"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.AuditedOn = (DateTime?)value;
            }

            value = dataReader["RowDeleted"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.RowDeleted = (Boolean?)value;
            }

            value = dataReader["CreatedBy"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.CreatedBy = (String)value;
            }

            value = dataReader["CreatedOn"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.CreatedOn = (DateTime?)value;
            }

            value = dataReader["NotifiedBy"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.NotifiedBy = (String)value;
            }

            value = dataReader["NotifiedOn"];
            if (value != DBNull.Value)
            {
                PM_ALT_LOGEntity.NotifiedOn = (DateTime?)value;
            }

            return PM_ALT_LOGEntity;
        }

        #endregion Private Method

    }
}
