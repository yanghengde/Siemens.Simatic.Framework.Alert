
//=====================================================================
// This file was generated by Siemens.Simatic Platform
// 
// LiXiao Info Tech Ltd. Copyright (c) 2014 All rights reserved. 
//=====================================================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Globalization;

using Siemens.Simatic.Platform.Core;
using Siemens.Simatic.Platform.Core.ORMapping;
using Siemens.Simatic.Platform.Common;
using Siemens.Simatic.Platform.Common.ExceptionHandling;
using Siemens.Simatic.Platform.Data;
using Siemens.Simatic.Platform.Data.DataAccess;

using Siemens.Simatic.ALT.Common;
using Siemens.Simatic.ALT.Common.Persistence;

namespace Siemens.Simatic.ALT.DataAccess
{
    [DefaultImplementationAttreibute(typeof(DefaultImpl.PM_ALT_CRITERIONDAO))]
    public partial interface IPM_ALT_CRITERIONDAO : IDataAccessor<PM_ALT_CRITERION>
    {
    }
}

namespace Siemens.Simatic.ALT.DataAccess.DefaultImpl
{
    /// Title: PM_ALT_CRITERIONDAO
    /// Copyright: LiXiao Info Tech Ltd.
    /// Version: 1.0  
    public partial class PM_ALT_CRITERIONDAO : IPM_ALT_CRITERIONDAO
    {

        #region SQl
        #region SqlInsert
        private const string SqlInsert = @"INSERT INTO dbo.PM_ALT_CRITERION (
                                                [CriterionID],
                                                [AlertID],
                                                [Relation],
                                                [Element],
                                                [Alias],
                                                [Operator],
                                                [Value],
                                                [ScaleType],
                                                [Action],
                                                [Sequence],
                                                [ParentID],
                                                [CritLevel],
                                                [IsActive],
                                                [RowDeleted],
                                                [CreatedBy],
                                                [CreatedOn],
                                                [ModifiedBy],
                                                [ModifiedOn]
                                                ) VALUES ( 
                                                @CriterionID,
                                                @AlertID,
                                                @Relation,
                                                @Element,
                                                @Alias,
                                                @Operator,
                                                @Value,
                                                @ScaleType,
                                                @Action,
                                                @Sequence,
                                                @ParentID,
                                                @CritLevel,
                                                @IsActive,
                                                @RowDeleted,
                                                @CreatedBy,
                                                @CreatedOn,
                                                @ModifiedBy,
                                                @ModifiedOn
                                            )";
        #endregion

        #region SqlDelete
        private const string SqlDelete = @"DELETE FROM dbo.PM_ALT_CRITERION 
                                           WHERE 1 = 1 
                                           AND CriterionID = @CriterionID";
        #endregion

        #region SqlUpdateAll
        private const string SqlUpdate = @"UPDATE dbo.PM_ALT_CRITERION SET
                                            [AlertID] = @AlertID,
                                            [Relation] = @Relation,
                                            [Element] = @Element,
                                            [Alias] = @Alias,
                                            [Operator] = @Operator,
                                            [Value] = @Value,
                                            [ScaleType] = @ScaleType,
                                            [Action] = @Action,
                                            [Sequence] = @Sequence,
                                            [ParentID] = @ParentID,
                                            [CritLevel] = @CritLevel,
                                            [IsActive] = @IsActive,
                                            [RowDeleted] = @RowDeleted,
                                            [CreatedBy] = @CreatedBy,
                                            [CreatedOn] = @CreatedOn,
                                            [ModifiedBy] = @ModifiedBy,
                                            [ModifiedOn] = @ModifiedOn
                                            WHERE 1 = 1
                                            AND [CriterionID] = @CriterionID";
        #endregion

        #region SqlGet
        private const string SqlGet = @"SELECT
                                            [CriterionID],
                                            [AlertID],
                                            [Relation],
                                            [Element],
                                            [Alias],
                                            [Operator],
                                            [Value],
                                            [ScaleType],
                                            [Action],
                                            [Sequence],
                                            [ParentID],
                                            [CritLevel],
                                            [IsActive],
                                            [RowDeleted],
                                            [CreatedBy],
                                            [CreatedOn],
                                            [ModifiedBy],
                                            [ModifiedOn]
                                        FROM dbo.PM_ALT_CRITERION
                                        WHERE 1 = 1 
                                        AND [CriterionID] = @CriterionID";
        #endregion

        #region SqlCount
        private const string SqlCount = @"SELECT COUNT(*) 
                                  FROM dbo.PM_ALT_CRITERION 
                                  WHERE ( 1 = 1 {0} ) 
                                          ";
        #endregion SqlCount

        #region SqlSelectAll
        private const string SqlSelectAll = @"SELECT
                                                    [CriterionID],
                                                    [AlertID],
                                                    [Relation],
                                                    [Element],
                                                    [Alias],
                                                    [Operator],
                                                    [Value],
                                                    [ScaleType],
                                                    [Action],
                                                    [Sequence],
                                                    [ParentID],
                                                    [CritLevel],
                                                    [IsActive],
                                                    [RowDeleted],
                                                    [CreatedBy],
                                                    [CreatedOn],
                                                    [ModifiedBy],
                                                    [ModifiedOn]
                                                FROM dbo.PM_ALT_CRITERION 
                                                WHERE (1 = 1 {0} ) {1}
                                        ";
        #endregion SqlSelectAll

        #region SqlSelect
        private const string SqlSelect = @"SELECT TOP {0} 
                                                [CriterionID],
                                                [AlertID],
                                                [Relation],
                                                [Element],
                                                [Alias],
                                                [Operator],
                                                [Value],
                                                [ScaleType],
                                                [Action],
                                                [Sequence],
                                                [ParentID],
                                                [CritLevel],
                                                [IsActive],
                                                [RowDeleted],
                                                [CreatedBy],
                                                [CreatedOn],
                                                [ModifiedBy],
                                                [ModifiedOn]
                                           FROM dbo.PM_ALT_CRITERION 
                                           WHERE ( 1 = 1 {1} 
                                           AND CriterionID 
                                           NOT IN 
                                           (SELECT TOP {2} CriterionID 
                                           FROM dbo.PM_ALT_CRITERION 
                                           WHERE (1 = 1 {3}) 
                                           {4} ) ) {5} 
                                           ";
        #endregion SqlSelect
        #endregion SQL


        #region IDataAccessor members

        #region Insert
        /// <summary>
        /// Insert 
        /// </summary>  
        public PM_ALT_CRITERION Insert(PM_ALT_CRITERION entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            PersistentPM_ALT_CRITERION PM_ALT_CRITERIONEntity = entity as PersistentPM_ALT_CRITERION;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_CRITERIONDAO.SqlInsert);

                db.AddInParameter(dbCommand, "@CriterionID", DbType.Guid, PM_ALT_CRITERIONEntity.CriterionID);
                db.AddInParameter(dbCommand, "@AlertID", DbType.Guid, PM_ALT_CRITERIONEntity.AlertID);
                db.AddInParameter(dbCommand, "@Relation", DbType.String, PM_ALT_CRITERIONEntity.Relation);
                db.AddInParameter(dbCommand, "@Element", DbType.String, PM_ALT_CRITERIONEntity.Element);
                db.AddInParameter(dbCommand, "@Alias", DbType.String, PM_ALT_CRITERIONEntity.Alias);
                db.AddInParameter(dbCommand, "@Operator", DbType.String, PM_ALT_CRITERIONEntity.Operator);
                db.AddInParameter(dbCommand, "@Value", DbType.String, PM_ALT_CRITERIONEntity.Value);
                db.AddInParameter(dbCommand, "@ScaleType", DbType.Int32, PM_ALT_CRITERIONEntity.ScaleType);
                db.AddInParameter(dbCommand, "@Action", DbType.Int32, PM_ALT_CRITERIONEntity.Action);
                db.AddInParameter(dbCommand, "@Sequence", DbType.Int32, PM_ALT_CRITERIONEntity.Sequence);
                db.AddInParameter(dbCommand, "@ParentID", DbType.Guid, PM_ALT_CRITERIONEntity.ParentID);
                db.AddInParameter(dbCommand, "@CritLevel", DbType.Int32, PM_ALT_CRITERIONEntity.CritLevel);
                db.AddInParameter(dbCommand, "@IsActive", DbType.Boolean, PM_ALT_CRITERIONEntity.IsActive);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_CRITERIONEntity.RowDeleted);
                db.AddInParameter(dbCommand, "@CreatedBy", DbType.String, PM_ALT_CRITERIONEntity.CreatedBy);
                db.AddInParameter(dbCommand, "@CreatedOn", DbType.DateTime, PM_ALT_CRITERIONEntity.CreatedOn);
                db.AddInParameter(dbCommand, "@ModifiedBy", DbType.String, PM_ALT_CRITERIONEntity.ModifiedBy);
                db.AddInParameter(dbCommand, "@ModifiedOn", DbType.DateTime, PM_ALT_CRITERIONEntity.ModifiedOn);

                int result = db.ExecuteNonQuery(dbCommand);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_CRITERIONEntity as PM_ALT_CRITERION;
        }

        /// <summary>
        /// Insert with transaction
        /// </summary>  
        public PM_ALT_CRITERION Insert(PM_ALT_CRITERION entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");
            PersistentPM_ALT_CRITERION PM_ALT_CRITERIONEntity = entity as PersistentPM_ALT_CRITERION;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_CRITERIONDAO.SqlInsert);

                db.AddInParameter(dbCommand, "@CriterionID", DbType.Guid, PM_ALT_CRITERIONEntity.CriterionID);
                db.AddInParameter(dbCommand, "@AlertID", DbType.Guid, PM_ALT_CRITERIONEntity.AlertID);
                db.AddInParameter(dbCommand, "@Relation", DbType.String, PM_ALT_CRITERIONEntity.Relation);
                db.AddInParameter(dbCommand, "@Element", DbType.String, PM_ALT_CRITERIONEntity.Element);
                db.AddInParameter(dbCommand, "@Alias", DbType.String, PM_ALT_CRITERIONEntity.Alias);
                db.AddInParameter(dbCommand, "@Operator", DbType.String, PM_ALT_CRITERIONEntity.Operator);
                db.AddInParameter(dbCommand, "@Value", DbType.String, PM_ALT_CRITERIONEntity.Value);
                db.AddInParameter(dbCommand, "@ScaleType", DbType.Int32, PM_ALT_CRITERIONEntity.ScaleType);
                db.AddInParameter(dbCommand, "@Action", DbType.Int32, PM_ALT_CRITERIONEntity.Action);
                db.AddInParameter(dbCommand, "@Sequence", DbType.Int32, PM_ALT_CRITERIONEntity.Sequence);
                db.AddInParameter(dbCommand, "@ParentID", DbType.Guid, PM_ALT_CRITERIONEntity.ParentID);
                db.AddInParameter(dbCommand, "@CritLevel", DbType.Int32, PM_ALT_CRITERIONEntity.CritLevel);
                db.AddInParameter(dbCommand, "@IsActive", DbType.Boolean, PM_ALT_CRITERIONEntity.IsActive);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_CRITERIONEntity.RowDeleted);
                db.AddInParameter(dbCommand, "@CreatedBy", DbType.String, PM_ALT_CRITERIONEntity.CreatedBy);
                db.AddInParameter(dbCommand, "@CreatedOn", DbType.DateTime, PM_ALT_CRITERIONEntity.CreatedOn);
                db.AddInParameter(dbCommand, "@ModifiedBy", DbType.String, PM_ALT_CRITERIONEntity.ModifiedBy);
                db.AddInParameter(dbCommand, "@ModifiedOn", DbType.DateTime, PM_ALT_CRITERIONEntity.ModifiedOn);

                int result = db.ExecuteNonQuery(dbCommand, transaction);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_CRITERIONEntity as PM_ALT_CRITERION;
        }

        #endregion Insert

        #region Delete
        /// <summary>
        /// Delete 
        /// </summary>  
        public void Delete(object entityId)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_CRITERIONDAO.SqlDelete);

                db.AddInParameter(dbCommand, "@CriterionID", DbType.Guid, entityId);
                int result = db.ExecuteNonQuery(dbCommand);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }


        /// <summary>
        /// Delete with transaction
        /// </summary>  
        public void Delete(object entityId, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_CRITERIONDAO.SqlDelete);

                db.AddInParameter(dbCommand, "@CriterionID", DbType.Guid, entityId);
                int result = db.ExecuteNonQuery(dbCommand, transaction);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        #endregion Delete

        #region Get
        /// <summary>
        /// Get
        /// </summary>
        public PM_ALT_CRITERION Get(object entityId)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");

            PM_ALT_CRITERION PM_ALT_CRITERIONEntity = null;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_CRITERIONDAO.SqlGet);

                db.AddInParameter(dbCommand, "@CriterionID", DbType.Guid, entityId);
                using (IDataReader dataReader = db.ExecuteReader(dbCommand))
                {
                    if (dataReader.Read())
                    {
                        PM_ALT_CRITERIONEntity = ReadEntity(dataReader);
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_CRITERIONEntity;
        }


        /// <summary>
        /// Get with transaction
        /// </summary>
        public PM_ALT_CRITERION Get(object entityId, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entityId, "entityId");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PM_ALT_CRITERION PM_ALT_CRITERIONEntity = null;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_CRITERIONDAO.SqlGet);

                db.AddInParameter(dbCommand, "@CriterionID", DbType.Guid, entityId);
                using (IDataReader dataReader = db.ExecuteReader(dbCommand, transaction))
                {
                    if (dataReader.Read())
                    {
                        PM_ALT_CRITERIONEntity = ReadEntity(dataReader);
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_CRITERIONEntity;
        }

        #endregion Get

        #region Update

        /// <summary>
        /// Update
        /// </summary>

        public void Update(PM_ALT_CRITERION entity)
        {
            Update(entity, true);
        }

        public void Update(PM_ALT_CRITERION entity, bool updateAll)
        {
            if (!updateAll)
            {
                UpdateSome(entity);
            }
            else
            {
                UpdateAll(entity);
            }
        }

        private void UpdateAll(PM_ALT_CRITERION entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");

            PersistentPM_ALT_CRITERION PM_ALT_CRITERIONEntity = entity as PersistentPM_ALT_CRITERION;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_CRITERIONDAO.SqlUpdate);

                db.AddInParameter(dbCommand, "@CriterionID", DbType.Guid, PM_ALT_CRITERIONEntity.CriterionID);
                db.AddInParameter(dbCommand, "@AlertID", DbType.Guid, PM_ALT_CRITERIONEntity.AlertID);
                db.AddInParameter(dbCommand, "@Relation", DbType.String, PM_ALT_CRITERIONEntity.Relation);
                db.AddInParameter(dbCommand, "@Element", DbType.String, PM_ALT_CRITERIONEntity.Element);
                db.AddInParameter(dbCommand, "@Alias", DbType.String, PM_ALT_CRITERIONEntity.Alias);
                db.AddInParameter(dbCommand, "@Operator", DbType.String, PM_ALT_CRITERIONEntity.Operator);
                db.AddInParameter(dbCommand, "@Value", DbType.String, PM_ALT_CRITERIONEntity.Value);
                db.AddInParameter(dbCommand, "@ScaleType", DbType.Int32, PM_ALT_CRITERIONEntity.ScaleType);
                db.AddInParameter(dbCommand, "@Action", DbType.Int32, PM_ALT_CRITERIONEntity.Action);
                db.AddInParameter(dbCommand, "@Sequence", DbType.Int32, PM_ALT_CRITERIONEntity.Sequence);
                db.AddInParameter(dbCommand, "@ParentID", DbType.Guid, PM_ALT_CRITERIONEntity.ParentID);
                db.AddInParameter(dbCommand, "@CritLevel", DbType.Int32, PM_ALT_CRITERIONEntity.CritLevel);
                db.AddInParameter(dbCommand, "@IsActive", DbType.Boolean, PM_ALT_CRITERIONEntity.IsActive);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_CRITERIONEntity.RowDeleted);
                db.AddInParameter(dbCommand, "@CreatedBy", DbType.String, PM_ALT_CRITERIONEntity.CreatedBy);
                db.AddInParameter(dbCommand, "@CreatedOn", DbType.DateTime, PM_ALT_CRITERIONEntity.CreatedOn);
                db.AddInParameter(dbCommand, "@ModifiedBy", DbType.String, PM_ALT_CRITERIONEntity.ModifiedBy);
                db.AddInParameter(dbCommand, "@ModifiedOn", DbType.DateTime, PM_ALT_CRITERIONEntity.ModifiedOn);
                int result = db.ExecuteNonQuery(dbCommand);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        private void UpdateSome(PM_ALT_CRITERION entity)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");

            PersistentPM_ALT_CRITERION PM_ALT_CRITERIONEntity = entity as PersistentPM_ALT_CRITERION;

            StringBuilder sqlUpdateSome = new StringBuilder();
            sqlUpdateSome.Append("UPDATE dbo.PM_ALT_CRITERION SET ");

            PropertyInfo[] propertyInfos = PM_ALT_CRITERIONEntity.GetType().GetProperties();
            Hashtable propertyValues = new System.Collections.Hashtable();
            int columnCountForUpdate = 0;

            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if (EntityMapping.ContainsProperty(propertyInfo.Name))
                {
                    object propertyValue = propertyInfo.GetValue(PM_ALT_CRITERIONEntity, null);
                    ORProperty property = EntityMapping[propertyInfo.Name];
                    if (!property.IsPrimaryKey)
                    {
                        if (!PM_ALT_CRITERIONEntity.IsDefaultValue(propertyInfo.Name))
                        {
                            propertyValues[propertyInfo.Name] = propertyValue;

                            sqlUpdateSome.Append(" " + property.ColumnName + " = @" + property.ColumnName + ",");
                            columnCountForUpdate++;
                        }
                    }
                    else
                    {
                        propertyValues[propertyInfo.Name] = propertyValue;
                    }
                }
            }
            if (columnCountForUpdate == 0)
            {
                return;
            }

            sqlUpdateSome.Remove(sqlUpdateSome.Length - 1, 1);
            sqlUpdateSome.Append(" WHERE 1 = 1 ");
            sqlUpdateSome.Append(" AND CriterionID = @CriterionID ");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(sqlUpdateSome.ToString());

                foreach (DictionaryEntry de in propertyValues)
                {
                    ORProperty property = EntityMapping[de.Key.ToString()];
                    db.AddInParameter(dbCommand, "@" + property.ColumnName, property.DatabaseType, de.Value);
                }

                int result = db.ExecuteNonQuery(dbCommand);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        /// <summary>
        /// Update with transaction
        /// </summary>

        public void Update(PM_ALT_CRITERION entity, DbTransaction transaction)
        {
            Update(entity, true, transaction);
        }

        public void Update(PM_ALT_CRITERION entity, bool updateAll, DbTransaction transaction)
        {
            if (!updateAll)
            {
                UpdateSome(entity, transaction);
            }
            else
            {
                UpdateAll(entity, transaction);
            }
        }

        private void UpdateAll(PM_ALT_CRITERION entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PersistentPM_ALT_CRITERION PM_ALT_CRITERIONEntity = entity as PersistentPM_ALT_CRITERION;

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(PM_ALT_CRITERIONDAO.SqlUpdate);

                db.AddInParameter(dbCommand, "@CriterionID", DbType.Guid, PM_ALT_CRITERIONEntity.CriterionID);
                db.AddInParameter(dbCommand, "@AlertID", DbType.Guid, PM_ALT_CRITERIONEntity.AlertID);
                db.AddInParameter(dbCommand, "@Relation", DbType.String, PM_ALT_CRITERIONEntity.Relation);
                db.AddInParameter(dbCommand, "@Element", DbType.String, PM_ALT_CRITERIONEntity.Element);
                db.AddInParameter(dbCommand, "@Alias", DbType.String, PM_ALT_CRITERIONEntity.Alias);
                db.AddInParameter(dbCommand, "@Operator", DbType.String, PM_ALT_CRITERIONEntity.Operator);
                db.AddInParameter(dbCommand, "@Value", DbType.String, PM_ALT_CRITERIONEntity.Value);
                db.AddInParameter(dbCommand, "@ScaleType", DbType.Int32, PM_ALT_CRITERIONEntity.ScaleType);
                db.AddInParameter(dbCommand, "@Action", DbType.Int32, PM_ALT_CRITERIONEntity.Action);
                db.AddInParameter(dbCommand, "@Sequence", DbType.Int32, PM_ALT_CRITERIONEntity.Sequence);
                db.AddInParameter(dbCommand, "@ParentID", DbType.Guid, PM_ALT_CRITERIONEntity.ParentID);
                db.AddInParameter(dbCommand, "@CritLevel", DbType.Int32, PM_ALT_CRITERIONEntity.CritLevel);
                db.AddInParameter(dbCommand, "@IsActive", DbType.Boolean, PM_ALT_CRITERIONEntity.IsActive);
                db.AddInParameter(dbCommand, "@RowDeleted", DbType.Boolean, PM_ALT_CRITERIONEntity.RowDeleted);
                db.AddInParameter(dbCommand, "@CreatedBy", DbType.String, PM_ALT_CRITERIONEntity.CreatedBy);
                db.AddInParameter(dbCommand, "@CreatedOn", DbType.DateTime, PM_ALT_CRITERIONEntity.CreatedOn);
                db.AddInParameter(dbCommand, "@ModifiedBy", DbType.String, PM_ALT_CRITERIONEntity.ModifiedBy);
                db.AddInParameter(dbCommand, "@ModifiedOn", DbType.DateTime, PM_ALT_CRITERIONEntity.ModifiedOn);
                int result = db.ExecuteNonQuery(dbCommand, transaction);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        private void UpdateSome(PM_ALT_CRITERION entity, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(entity, "entity");
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            PersistentPM_ALT_CRITERION PM_ALT_CRITERIONEntity = entity as PersistentPM_ALT_CRITERION;

            StringBuilder sqlUpdateSome = new StringBuilder();
            sqlUpdateSome.Append("UPDATE dbo.PM_ALT_CRITERION SET ");

            PropertyInfo[] propertyInfos = PM_ALT_CRITERIONEntity.GetType().GetProperties();
            Hashtable propertyValues = new System.Collections.Hashtable();
            int columnCountForUpdate = 0;

            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if (EntityMapping.ContainsProperty(propertyInfo.Name))
                {
                    object propertyValue = propertyInfo.GetValue(PM_ALT_CRITERIONEntity, null);
                    ORProperty property = EntityMapping[propertyInfo.Name];
                    if (!property.IsPrimaryKey)
                    {
                        if (!PM_ALT_CRITERIONEntity.IsDefaultValue(propertyInfo.Name))
                        {
                            propertyValues[propertyInfo.Name] = propertyValue;

                            sqlUpdateSome.Append(" " + property.ColumnName + " = @" + property.ColumnName + ",");
                            columnCountForUpdate++;
                        }
                    }
                    else
                    {
                        propertyValues[propertyInfo.Name] = propertyValue;
                    }
                }
            }
            if (columnCountForUpdate == 0)
            {
                return;
            }

            sqlUpdateSome.Remove(sqlUpdateSome.Length - 1, 1);
            sqlUpdateSome.Append(" WHERE 1 = 1 ");
            sqlUpdateSome.Append(" AND CriterionID = @CriterionID ");

            try
            {
                Database db = GetDatabaseInstance();
                DbCommand dbCommand = db.GetSqlStringCommand(sqlUpdateSome.ToString());

                foreach (DictionaryEntry de in propertyValues)
                {
                    ORProperty property = EntityMapping[de.Key.ToString()];
                    db.AddInParameter(dbCommand, "@" + property.ColumnName, property.DatabaseType, de.Value);
                }

                int result = db.ExecuteNonQuery(dbCommand, transaction);

                if (result == 0)
                {
                    throw new EntityNotFoundException();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }
        }

        /// <summary>
        /// ORMapping
        /// </summary>

        private OREntity entityMapping;

        public OREntity EntityMapping
        {
            get
            {
                if (entityMapping == null)
                {
                    LoadMappings();
                }

                return entityMapping;
            }
        }

        private void LoadMappings()
        {
            entityMapping = new OREntity();
            entityMapping.Name = "PM_ALT_CRITERION";
            entityMapping.TableName = "dbo.PM_ALT_CRITERION";

            foreach (object[] propertyMapping in this.PropertyMappings)
            {
                ORProperty property = new ORProperty();

                property.ColumnName = (string)propertyMapping[0];
                property.DatabaseType = (DbType)propertyMapping[1];
                property.IsNullable = (bool)propertyMapping[2];
                property.IsPrimaryKey = (bool)propertyMapping[3];
                property.Name = (string)propertyMapping[4];
                property.Type = (Type)propertyMapping[5];

                entityMapping.Properties.Add(property);
            }
        }

        private object[][] PropertyMappings = new object[][] 
        {
            new object[] {"CriterionID", DbType.Guid, false, true, "CriterionID",typeof(Guid?)},
            new object[] {"AlertID", DbType.Guid, false, false, "AlertID",typeof(Guid?)},
            new object[] {"Relation", DbType.String, false, false, "Relation",typeof(String)},
            new object[] {"Element", DbType.String, true, false, "Element",typeof(String)},
            new object[] {"Alias", DbType.String, true, false, "Alias",typeof(String)},
            new object[] {"Operator", DbType.String, true, false, "Operator",typeof(String)},
            new object[] {"Value", DbType.String, true, false, "Value",typeof(String)},
            new object[] {"ScaleType", DbType.Int32, false, false, "ScaleType",typeof(Int32?)},
            new object[] {"Action", DbType.Int32, false, false, "Action",typeof(Int32?)},
            new object[] {"Sequence", DbType.Int32, false, false, "Sequence",typeof(Int32?)},
            new object[] {"ParentID", DbType.Guid, true, false, "ParentID",typeof(Guid?)},
            new object[] {"CritLevel", DbType.Int32, false, false, "CritLevel",typeof(Int32?)},
            new object[] {"IsActive", DbType.Boolean, false, false, "IsActive",typeof(Boolean?)},
            new object[] {"RowDeleted", DbType.Boolean, false, false, "RowDeleted",typeof(Boolean?)},
            new object[] {"CreatedBy", DbType.String, false, false, "CreatedBy",typeof(String)},
            new object[] {"CreatedOn", DbType.DateTime, false, false, "CreatedOn",typeof(DateTime?)},
            new object[] {"ModifiedBy", DbType.String, true, false, "ModifiedBy",typeof(String)},
            new object[] {"ModifiedOn", DbType.DateTime, true, false, "ModifiedOn",typeof(DateTime?)},
        };


        #endregion Update

        #region Find
        /// <summary>
        /// Find
        /// </summary>
        public IList<PM_ALT_CRITERION> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords)
        {
            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<PM_ALT_CRITERION> PM_ALT_CRITERIONList = new List<PM_ALT_CRITERION>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY CriterionID";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, PM_ALT_CRITERIONDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       PM_ALT_CRITERIONDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand))
                    {
                        while (dataReader.Read())
                        {
                            PM_ALT_CRITERIONList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                //DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                //totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_CRITERIONList;
        }

        /// <summary>
        /// Find with transaction
        /// </summary>
        public IList<PM_ALT_CRITERION> Find(int pageIndex, int pageSize, IFilter filter, ISort sort, out long totalRecords, DbTransaction transaction)
        {
            ArgumentValidator.CheckForNullArgument(transaction, "transaction");

            if (pageIndex < 0)
            {
                throw new ArgumentOutOfRangeException("pageIndex");
            }

            if (pageSize < -1)
            {
                throw new ArgumentOutOfRangeException("pageSize");
            }

            IList<PM_ALT_CRITERION> PM_ALT_CRITERIONList = new List<PM_ALT_CRITERION>();
            totalRecords = 0;

            string cmdText;
            string cmdCountText;

            int beginIndex = pageSize * pageIndex;

            string filterClause = "";
            if (filter == null || String.IsNullOrEmpty(filter.ToQueryString()))
            {
            }
            else
            {
                filterClause = filter.ToQueryString();
            }

            string sortClause = "";
            if (sort == null || String.IsNullOrEmpty(sort.ToSortString()))
            {
                sortClause = "ORDER BY CriterionID";
            }
            else
            {
                sortClause = sort.ToSortString();
            }

            cmdCountText = string.Format(CultureInfo.InvariantCulture, SqlCount, filterClause);

            if (pageSize == -1)
            {
                cmdText = string.Format(
                CultureInfo.InvariantCulture, PM_ALT_CRITERIONDAO.SqlSelectAll, filterClause, sortClause);
            }
            else
            {
                cmdText = String.Format(
                       CultureInfo.InvariantCulture,
                       PM_ALT_CRITERIONDAO.SqlSelect, pageSize.ToString(), filterClause, beginIndex.ToString(), filterClause, sortClause, sortClause);
            }

            try
            {
                Database db = GetDatabaseInstance();

                if (pageSize != 0)
                {
                    DbCommand dbCommand = db.GetSqlStringCommand(cmdText);
                    using (IDataReader dataReader = db.ExecuteReader(dbCommand, transaction))
                    {
                        while (dataReader.Read())
                        {
                            PM_ALT_CRITERIONList.Add(ReadEntity(dataReader));
                        }
                    }
                }

                DbCommand dbCommandCount = db.GetSqlStringCommand(cmdCountText);
                totalRecords = Convert.ToInt64(db.ExecuteScalar(dbCommandCount, transaction));

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, ExceptionPolicy.DataAccessDefaultPolicy);
            }

            return PM_ALT_CRITERIONList;
        }

        #endregion Find

        #endregion IDataAccessor members


        #region Private Method

        private static Database GetDatabaseInstance()
        {
            return DatabaseFactory.CreateDatabase(DatabaseEnum.SITBusinessDB);
        }

        private static PM_ALT_CRITERION ReadEntity(IDataReader dataReader)
        {
            PM_ALT_CRITERION PM_ALT_CRITERIONEntity = new PM_ALT_CRITERION();
            object value;


            value = dataReader["CriterionID"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.CriterionID = (Guid?)value;
            }

            value = dataReader["AlertID"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.AlertID = (Guid?)value;
            }

            value = dataReader["Relation"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.Relation = (String)value;
            }

            value = dataReader["Element"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.Element = (String)value;
            }

            value = dataReader["Alias"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.Alias = (String)value;
            }

            value = dataReader["Operator"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.Operator = (String)value;
            }

            value = dataReader["Value"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.Value = (String)value;
            }

            value = dataReader["ScaleType"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.ScaleType = (Int32?)value;
            }

            value = dataReader["Action"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.Action = (Int32?)value;
            }

            value = dataReader["Sequence"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.Sequence = (Int32?)value;
            }

            value = dataReader["ParentID"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.ParentID = (Guid?)value;
            }

            value = dataReader["CritLevel"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.CritLevel = (Int32?)value;
            }

            value = dataReader["IsActive"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.IsActive = (Boolean?)value;
            }

            value = dataReader["RowDeleted"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.RowDeleted = (Boolean?)value;
            }

            value = dataReader["CreatedBy"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.CreatedBy = (String)value;
            }

            value = dataReader["CreatedOn"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.CreatedOn = (DateTime?)value;
            }

            value = dataReader["ModifiedBy"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.ModifiedBy = (String)value;
            }

            value = dataReader["ModifiedOn"];
            if (value != DBNull.Value)
            {
                PM_ALT_CRITERIONEntity.ModifiedOn = (DateTime?)value;
            }

            return PM_ALT_CRITERIONEntity;
        }

        #endregion Private Method

    }
}
